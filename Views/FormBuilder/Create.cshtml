@{
    ViewData["Title"] = ViewData["FormId"] != null ? "Edit Form" : "Create Form";
}

<div x-data="formBuilder()" class="space-y-6">
    <!-- Header with form actions -->
    <div class="bg-white shadow-sm rounded-lg p-4">
        <div class="flex flex-col sm:flex-row sm:items-center gap-4">
            <div class="flex-grow">
                <input type="text" x-model="formTitle" placeholder="Form Title" 
                    class="block w-full border-none text-2xl font-semibold focus:ring-0 p-0 focus:outline-none"
                    @@keyup="updateUnsavedChanges">
                <input type="text" x-model="formDescription" placeholder="Form Description" 
                    class="block w-full border-none text-gray-500 focus:ring-0 p-0 mt-1 focus:outline-none"
                    @@keyup="updateUnsavedChanges">
            </div>
            <div class="flex items-center space-x-3">
                <div class="relative" x-data="{ open: false }">
                    <button 
                        @@click="open = !open" 
                        type="button" 
                        class="inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                        <span x-text="formStatus" class="mr-1"></span>
                        <svg class="h-4 w-4 ml-1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
                        </svg>
                    </button>
                    <div 
                        x-show="open" 
                        @@click.away="open = false" 
                        x-transition:enter="transition ease-out duration-100" 
                        x-transition:enter-start="transform opacity-0 scale-95" 
                        x-transition:enter-end="transform opacity-100 scale-100" 
                        x-transition:leave="transition ease-in duration-75" 
                        x-transition:leave-start="transform opacity-100 scale-100" 
                        x-transition:leave-end="transform opacity-0 scale-95" 
                        class="origin-top-right absolute right-0 mt-2 w-40 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 focus:outline-none z-10" 
                        role="menu" 
                        aria-orientation="vertical">
                        <div class="py-1" role="none">
                            <template x-for="status in ['Draft', 'Active', 'Archived']">
                                <button 
                                    @@click="setFormStatus(status); open = false" 
                                    class="flex items-center w-full px-4 py-2 text-sm text-gray-700 hover:bg-gray-100" 
                                    role="menuitem"
                                    :class="{'bg-indigo-50 text-indigo-700': status === formStatus}">
                                    <template x-if="status === 'Draft'">
                                        <svg class="mr-2 h-4 w-4 text-yellow-500" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                            <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z" />
                                        </svg>
                                    </template>
                                    <template x-if="status === 'Active'">
                                        <svg class="mr-2 h-4 w-4 text-green-500" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                                        </svg>
                                    </template>
                                    <template x-if="status === 'Archived'">
                                        <svg class="mr-2 h-4 w-4 text-gray-500" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                            <path d="M4 3a2 2 0 100 4h12a2 2 0 100-4H4z" />
                                            <path fill-rule="evenodd" d="M3 8h14v7a2 2 0 01-2 2H5a2 2 0 01-2-2V8zm5 3a1 1 0 011-1h2a1 1 0 110 2H9a1 1 0 01-1-1z" clip-rule="evenodd" />
                                        </svg>
                                    </template>
                                    <span x-text="status"></span>
                                </button>
                            </template>
                        </div>
                    </div>
                </div>
                
                <div class="relative" x-data="{ open: false }">
                    <button 
                        @@click="open = !open" 
                        type="button" 
                        class="inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                        <svg class="h-4 w-4 mr-1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M11.49 3.17c-.38-1.56-2.6-1.56-2.98 0a1.532 1.532 0 01-2.286.948c-1.372-.836-2.942.734-2.106 2.106.54.886.061 2.042-.947 2.287-1.561.379-1.561 2.6 0 2.978a1.532 1.532 0 01.947 2.287c-.836 1.372.734 2.942 2.106 2.106a1.532 1.532 0 012.287.947c.379 1.561 2.6 1.561 2.978 0a1.533 1.533 0 012.287-.947c1.372.836 2.942-.734 2.106-2.106a1.533 1.533 0 01.947-2.287c1.561-.379 1.561-2.6 0-2.978a1.532 1.532 0 01-.947-2.287c.836-1.372-.734-2.942-2.106-2.106a1.532 1.532 0 01-2.287-.947zM10 13a3 3 0 100-6 3 3 0 000 6z" clip-rule="evenodd" />
                        </svg>
                        Settings
                    </button>
                    <div 
                        x-show="open" 
                        @@click.away="open = false" 
                        x-transition:enter="transition ease-out duration-100" 
                        x-transition:enter-start="transform opacity-0 scale-95" 
                        x-transition:enter-end="transform opacity-100 scale-100" 
                        x-transition:leave="transition ease-in duration-75" 
                        x-transition:leave-start="transform opacity-100 scale-100" 
                        x-transition:leave-end="transform opacity-0 scale-95" 
                        class="origin-top-right absolute right-0 mt-2 w-56 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 focus:outline-none z-10" 
                        role="menu" 
                        aria-orientation="vertical">
                        <div class="py-1 px-3" role="none">
                            <div class="space-y-2 py-2">
                                <label class="block text-sm font-medium text-gray-700">Form Settings</label>
                                <div class="flex items-center">
                                    <input type="checkbox" id="form-allow-anonymous" x-model="formSettings.allowAnonymous" class="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded">
                                    <label for="form-allow-anonymous" class="ml-2 block text-sm text-gray-700">Allow anonymous submissions</label>
                                </div>
                                <div class="flex items-center">
                                    <input type="checkbox" id="form-collect-email" x-model="formSettings.collectEmail" class="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded">
                                    <label for="form-collect-email" class="ml-2 block text-sm text-gray-700">Collect email addresses</label>
                                </div>
                                <div class="flex items-center">
                                    <input type="checkbox" id="form-send-confirmation" x-model="formSettings.sendConfirmation" class="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded">
                                    <label for="form-send-confirmation" class="ml-2 block text-sm text-gray-700">Send confirmation email</label>
                                </div>
                                <div class="flex items-center">
                                    <input type="checkbox" id="form-limit-responses" x-model="formSettings.limitResponses" class="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded">
                                    <label for="form-limit-responses" class="ml-2 block text-sm text-gray-700">Limit responses</label>
                                </div>
                                <div x-show="formSettings.limitResponses" class="mt-2">
                                    <label for="form-response-limit" class="block text-sm font-medium text-gray-700">Maximum responses</label>
                                    <input type="number" id="form-response-limit" x-model="formSettings.responseLimit" min="1" class="mt-1 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md">
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <button 
                    type="button" 
                    @@click="previewForm" 
                    class="inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                    <svg class="h-4 w-4 mr-1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                        <path d="M10 12a2 2 0 100-4 2 2 0 000 4z" />
                        <path fill-rule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clip-rule="evenodd" />
                    </svg>
                    Preview
                </button>
                
                <button 
                    type="button" 
                    @@click="saveForm" 
                    class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                    <svg class="h-4 w-4 mr-1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z" clip-rule="evenodd" />
                    </svg>
                    Save
                </button>
            </div>
        </div>
        <!-- Unsaved changes indicator -->
        <div x-show="hasUnsavedChanges" class="mt-2 flex items-center text-sm text-amber-600">
            <svg class="h-4 w-4 mr-1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
            </svg>
            <span>Unsaved changes</span>
        </div>
    </div>

    <!-- Main Content -->
    <div class="flex flex-col lg:flex-row gap-6">
        <!-- Form Builder Canvas -->
        <div class="flex-grow bg-white shadow-sm rounded-lg overflow-hidden">
            <div class="border-b border-gray-200 p-4 flex justify-between items-center">
                <h2 class="text-lg font-medium text-gray-900">Form Builder</h2>
                <div class="flex space-x-2">
                    <button 
                        type="button" 
                        @@click="undoAction" 
                        :disabled="undoStack.length === 0"
                        :class="{'opacity-50 cursor-not-allowed': undoStack.length === 0}" 
                        class="p-1 rounded-md hover:bg-gray-100 text-gray-700" 
                        title="Undo">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10h10a8 8 0 018 8v2M3 10l6 6m-6-6l6-6" />
                        </svg>
                    </button>
                    <button 
                        type="button" 
                        @@click="redoAction" 
                        :disabled="redoStack.length === 0"
                        :class="{'opacity-50 cursor-not-allowed': redoStack.length === 0}" 
                        class="p-1 rounded-md hover:bg-gray-100 text-gray-700" 
                        title="Redo">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 10h7m0 0v2m0-2l-6 6m6-6l-6-6" />
                        </svg>
                    </button>
                    <button 
                        type="button" 
                        @@click="clearForm" 
                        class="text-sm text-gray-500 hover:text-gray-700 flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                        </svg>
                        Clear All
                    </button>
                </div>
            </div>
            <div class="p-6">
                <div 
                    id="form-canvas" 
                    class="min-h-[500px] border-2 border-dashed border-gray-300 rounded-lg p-4 relative"
                    x-ref="formCanvas"
                    @@dragover.prevent="dragOver($event)"
                    @@dragleave.prevent="dragLeave($event)"
                    @@drop.prevent="drop($event)">
                    
                    <!-- Empty state message -->
                    <template x-if="formElements.length === 0">
                        <div class="flex flex-col items-center justify-center h-64 text-gray-400">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mb-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 13h6m-3-3v6m-3 5h8a2 2 0 002-2V8a2 2 0 00-2-2H9a2 2 0 00-2 2v8a2 2 0 002 2z" />
                            </svg>
                            <p class="text-center">Drag and drop form elements from the toolbox</p>
                            <button
                                @@click="addSampleElements"
                                class="mt-4 inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z" />
                                </svg>
                                Add Sample Questions
                            </button>
                        </div>
                    </template>
                    
                    <!-- Drop indicator -->
                    <div 
                        x-show="dropTargetIndex !== null && isDragging" 
                        class="h-2 bg-indigo-500 rounded-full my-2 transition-all duration-200 ease-in-out" 
                        :style="{ transform: `translateY(${dropTargetIndicatorPosition}px)` }">
                    </div>
                    
                    <!-- Form elements (each draggable) -->
                    <template x-for="(element, index) in formElements" :key="element.id">
                        <div 
                            :id="`element-${element.id}`"
                            class="bg-white border p-4 mb-3 rounded-lg cursor-move hover:border-indigo-300 transition-colors duration-200"
                            :class="{
                                'ring-2 ring-indigo-500 border-indigo-500': selectedElementIndex === index,
                                'shadow-md': isDragging && draggedElementIndex === index,
                                'opacity-50': isDragging && draggedElementIndex === index
                            }"
                            @@click.stop="selectElement(index)"
                            draggable="true"
                            @@dragstart="dragStart($event, index)"
                            @@dragend="dragEnd($event)">
                            
                            <div class="flex justify-between items-start mb-2">
                                <div class="flex items-center">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400 mr-2 cursor-move" viewBox="0 0 20 20" fill="currentColor">
                                        <path d="M7 2a2 2 0 00-2 2v12a2 2 0 002 2h6a2 2 0 002-2V4a2 2 0 00-2-2H7zm3 14a1 1 0 100-2 1 1 0 000 2zm0-4a1 1 0 100-2 1 1 0 000 2zm0-4a1 1 0 100-2 1 1 0 000 2z" />
                                    </svg>
                                    <div class="space-y-1">
                                        <h3 class="font-medium text-gray-900" x-text="element.label || getElementTypeName(element.type)"></h3>
                                        <div class="flex space-x-2">
                                            <span x-show="element.required" class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-red-100 text-red-800">
                                                Required
                                            </span>
                                            <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-gray-100 text-gray-800" x-text="getElementTypeName(element.type)"></span>
                                        </div>
                                    </div>
                                </div>
                                <div class="flex space-x-2">
                                    <button type="button" @@click.stop="duplicateElement(index)" class="text-gray-400 hover:text-indigo-600 p-1" title="Duplicate">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                                        </svg>
                                    </button>
                                    <button type="button" @@click.stop="removeElement(index)" class="text-gray-400 hover:text-red-600 p-1" title="Remove">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                        </svg>
                                    </button>
                                </div>
                            </div>
                            
                            <!-- Element Preview based on type -->
                            <div class="mt-3">
                                <!-- Text Input -->
                                <template x-if="element.type === 'text'">
                                    <input type="text" class="mt-1 block w-full shadow-sm border-gray-300 rounded-md" :placeholder="element.placeholder || 'Text input'" disabled>
                                </template>
                                
                                <!-- Textarea -->
                                <template x-if="element.type === 'textarea'">
                                    <textarea class="mt-1 block w-full shadow-sm border-gray-300 rounded-md" rows="3" :placeholder="element.placeholder || 'Text area'" disabled></textarea>
                                </template>
                                
                                <!-- Select -->
                                <template x-if="element.type === 'select'">
                                    <div>
                                        <select class="mt-1 block w-full shadow-sm border-gray-300 rounded-md" disabled>
                                            <option selected disabled x-text="element.placeholder || 'Select an option'"></option>
                                            <template x-for="option in element.options" :key="option.value">
                                                <option x-text="option.label"></option>
                                            </template>
                                        </select>
                                    </div>
                                </template>
                                
                                <!-- Radio Group -->
                                <template x-if="element.type === 'radio'">
                                    <div class="mt-2 space-y-2">
                                        <template x-for="option in element.options" :key="option.value">
                                            <div class="flex items-center">
                                                <input type="radio" class="h-4 w-4 text-indigo-600 border-gray-300" disabled>
                                                <label class="ml-2 block text-sm text-gray-700" x-text="option.label"></label>
                                            </div>
                                        </template>
                                    </div>
                                </template>
                                
                                <!-- Checkbox Group -->
                                <template x-if="element.type === 'checkbox'">
                                    <div class="mt-2 space-y-2">
                                        <template x-for="option in element.options" :key="option.value">
                                            <div class="flex items-center">
                                                <input type="checkbox" class="h-4 w-4 text-indigo-600 border-gray-300 rounded" disabled>
                                                <label class="ml-2 block text-sm text-gray-700" x-text="option.label"></label>
                                            </div>
                                        </template>
                                    </div>
                                </template>
                                
                                <!-- File Upload -->
                                <template x-if="element.type === 'file'">
                                    <div class="mt-1 flex justify-center px-6 pt-5 pb-6 border-2 border-gray-300 border-dashed rounded-md">
                                        <div class="space-y-1 text-center">
                                            <svg class="mx-auto h-12 w-12 text-gray-400" stroke="currentColor" fill="none" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                                            </svg>
                                            <p class="text-xs text-gray-500" x-text="element.acceptedFiles || 'Upload a file or drag and drop'"></p>
                                        </div>
                                    </div>
                                </template>
                                
                                <!-- Date Picker -->
                                <template x-if="element.type === 'date'">
                                    <input type="date" class="mt-1 block w-full shadow-sm border-gray-300 rounded-md" disabled>
                                </template>
                                
                                <!-- Number Input -->
                                <template x-if="element.type === 'number'">
                                    <input type="number" class="mt-1 block w-full shadow-sm border-gray-300 rounded-md" :placeholder="element.placeholder || 'Number input'" disabled>
                                </template>
                                
                                <!-- Email Input -->
                                <template x-if="element.type === 'email'">
                                    <input type="email" class="mt-1 block w-full shadow-sm border-gray-300 rounded-md" :placeholder="element.placeholder || 'Email input'" disabled>
                                </template>
                                
                                <!-- Phone Input -->
                                <template x-if="element.type === 'phone'">
                                    <input type="tel" class="mt-1 block w-full shadow-sm border-gray-300 rounded-md" :placeholder="element.placeholder || 'Phone input'" disabled>
                                </template>
                                
                                <!-- URL Input -->
                                <template x-if="element.type === 'url'">
                                    <input type="url" class="mt-1 block w-full shadow-sm border-gray-300 rounded-md" :placeholder="element.placeholder || 'URL input'" disabled>
                                </template>
                                
                                <!-- Rating Scale -->
                                <template x-if="element.type === 'rating'">
                                    <div class="mt-2">
                                        <div class="flex space-x-2">
                                            <template x-for="i in (element.maxRating || 5)">
                                                <button type="button" class="rounded-full h-8 w-8 flex items-center justify-center border border-gray-300 bg-white text-gray-700" disabled>
                                                    <span x-text="i"></span>
                                                </button>
                                            </template>
                                        </div>
                                        <div class="flex justify-between mt-1">
                                            <span class="text-xs text-gray-500" x-text="element.minLabel || 'Low'"></span>
                                            <span class="text-xs text-gray-500" x-text="element.maxLabel || 'High'"></span>
                                        </div>
                                    </div>
                                </template>
                                
                                <!-- Section Header -->
                                <template x-if="element.type === 'header'">
                                    <div class="border-b border-gray-200 pb-2">
                                        <h3 class="text-lg font-medium text-gray-900" x-text="element.label || 'Section Header'"></h3>
                                        <p x-show="element.helpText" class="mt-1 text-sm text-gray-500" x-text="element.helpText"></p>
                                    </div>
                                </template>
                                
                                <!-- Paragraph Text -->
                                <template x-if="element.type === 'paragraph'">
                                    <div>
                                        <p class="text-sm text-gray-500" x-text="element.content || 'Paragraph text goes here...'"></p>
                                    </div>
                                </template>
                                
                                <!-- Matrix/Grid -->
                                <template x-if="element.type === 'matrix'">
                                    <div class="mt-2">
                                        <div class="overflow-x-auto">
                                            <table class="min-w-full divide-y divide-gray-200">
                                                <thead class="bg-gray-50">
                                                    <tr>
                                                        <th scope="col" class="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"></th>
                                                        <template x-for="option in (element.columns || [])">
                                                            <th scope="col" class="px-3 py-2 text-center text-xs font-medium text-gray-500 uppercase tracking-wider" x-text="option.label"></th>
                                                        </template>
                                                    </tr>
                                                </thead>
                                                <tbody class="bg-white divide-y divide-gray-200">
                                                    <template x-for="row in (element.rows || [])">
                                                        <tr>
                                                            <td class="px-3 py-2 whitespace-nowrap text-sm font-medium text-gray-900" x-text="row.label"></td>
                                                            <template x-for="col in (element.columns || [])">
                                                                <td class="px-3 py-2 whitespace-nowrap text-center text-sm text-gray-500">
                                                                    <input type="radio" class="h-4 w-4 text-indigo-600 border-gray-300" disabled>
                                                                </td>
                                                            </template>
                                                        </tr>
                                                    </template>
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                </template>
                            </div>
                            
                            <p x-show="element.helpText" class="mt-2 text-xs text-gray-500" x-text="element.helpText"></p>
                        </div>
                    </template>
                    
                    <!-- Drop target indicator when dragging over -->
                    <div 
                        x-show="isDraggingOver" 
                        class="absolute inset-0 border-2 border-indigo-400 rounded-lg bg-indigo-50 bg-opacity-30 pointer-events-none">
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Toolbox and Properties Sidebar -->
        <div class="lg:w-80 space-y-6">
            <!-- Tabs for Toolbox and Properties -->
            <div x-data="{ activeTab: 'toolbox' }" class="bg-white shadow-sm rounded-lg overflow-hidden">
                <div class="border-b border-gray-200">
                    <nav class="-mb-px flex" aria-label="Tabs">
                        <button
                            @@click="activeTab = 'toolbox'"
                            class="w-1/2 py-3 px-4 text-center border-b-2 font-medium text-sm"
                            :class="activeTab === 'toolbox' ? 'border-indigo-500 text-indigo-600' : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'">
                            Form Elements
                        </button>
                        <button
                            @@click="activeTab = 'properties'; selectedElementIndex = selectedElementIndex === null && formElements.length > 0 ? 0 : selectedElementIndex"
                            class="w-1/2 py-3 px-4 text-center border-b-2 font-medium text-sm"
                            :class="activeTab === 'properties' ? 'border-indigo-500 text-indigo-600' : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'">
                            Properties
                        </button>
                    </nav>
                </div>
                
                <!-- Toolbox Panel -->
                <div x-show="activeTab === 'toolbox'" class="p-4">
                    <div class="space-y-1 mb-4">
                        <label class="block text-sm font-medium text-gray-700">Basic Elements</label>
                        <div class="space-y-2">
                            <div 
                                class="flex items-center p-3 border border-gray-200 rounded-md cursor-grab hover:bg-gray-50 transition-colors"
                                draggable="true"
                                @@dragstart="dragStartFromToolbox($event, 'text')">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101" />
                                </svg>
                                <span class="text-sm font-medium">Short Text</span>
                            </div>
                            
                            <div 
                                class="flex items-center p-3 border border-gray-200 rounded-md cursor-grab hover:bg-gray-50 transition-colors"
                                draggable="true"
                                @@dragstart="dragStartFromToolbox($event, 'textarea')">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h7" />
                                </svg>
                                <span class="text-sm font-medium">Paragraph</span>
                            </div>
                            
                            <div 
                                class="flex items-center p-3 border border-gray-200 rounded-md cursor-grab hover:bg-gray-50 transition-colors"
                                draggable="true"
                                @@dragstart="dragStartFromToolbox($event, 'select')">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l4-4 4 4m0 6l-4 4-4-4" />
                                </svg>
                                <span class="text-sm font-medium">Dropdown</span>
                            </div>
                            
                            <div 
                                class="flex items-center p-3 border border-gray-200 rounded-md cursor-grab hover:bg-gray-50 transition-colors"
                                draggable="true"
                                @@dragstart="dragStartFromToolbox($event, 'radio')">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                                </svg>
                                <span class="text-sm font-medium">Multiple Choice</span>
                            </div>
                            
                            <div 
                                class="flex items-center p-3 border border-gray-200 rounded-md cursor-grab hover:bg-gray-50 transition-colors"
                                draggable="true"
                                @@dragstart="dragStartFromToolbox($event, 'checkbox')">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                                </svg>
                                <span class="text-sm font-medium">Checkboxes</span>
                            </div>
                        </div>
                    </div>
                    
                    <div class="space-y-1 mb-4">
                        <label class="block text-sm font-medium text-gray-700">Advanced Elements</label>
                        <div class="space-y-2">
                            <div 
                                class="flex items-center p-3 border border-gray-200 rounded-md cursor-grab hover:bg-gray-50 transition-colors"
                                draggable="true"
                                @@dragstart="dragStartFromToolbox($event, 'file')">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.172 7l-6.586 6.586a2 2 0 102.828 2.828l6.414-6.586a4 4 0 00-5.656-5.656l-6.415 6.585a6 6 0 108.486 8.486L20.5 13" />
                                </svg>
                                <span class="text-sm font-medium">File Upload</span>
                            </div>
                            
                            <div 
                                class="flex items-center p-3 border border-gray-200 rounded-md cursor-grab hover:bg-gray-50 transition-colors"
                                draggable="true"
                                @@dragstart="dragStartFromToolbox($event, 'date')">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                                </svg>
                                <span class="text-sm font-medium">Date Picker</span>
                            </div>
                            
                            <div 
                                class="flex items-center p-3 border border-gray-200 rounded-md cursor-grab hover:bg-gray-50 transition-colors"
                                draggable="true"
                                @@dragstart="dragStartFromToolbox($event, 'email')">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                                </svg>
                                <span class="text-sm font-medium">Email</span>
                            </div>
                            
                            <div 
                                class="flex items-center p-3 border border-gray-200 rounded-md cursor-grab hover:bg-gray-50 transition-colors"
                                draggable="true"
                                @@dragstart="dragStartFromToolbox($event, 'number')">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 20l4-16m2 16l4-16M6 9h14M4 15h14" />
                                </svg>
                                <span class="text-sm font-medium">Number</span>
                            </div>
                            
                            <div 
                                class="flex items-center p-3 border border-gray-200 rounded-md cursor-grab hover:bg-gray-50 transition-colors"
                                draggable="true"
                                @@dragstart="dragStartFromToolbox($event, 'phone')">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
                                </svg>
                                <span class="text-sm font-medium">Phone</span>
                            </div>
                            
                            <div 
                                class="flex items-center p-3 border border-gray-200 rounded-md cursor-grab hover:bg-gray-50 transition-colors"
                                draggable="true"
                                @@dragstart="dragStartFromToolbox($event, 'url')">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1" />
                                </svg>
                                <span class="text-sm font-medium">Website URL</span>
                            </div>
                            
                            <div 
                                class="flex items-center p-3 border border-gray-200 rounded-md cursor-grab hover:bg-gray-50 transition-colors"
                                draggable="true"
                                @@dragstart="dragStartFromToolbox($event, 'rating')">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z" />
                                </svg>
                                <span class="text-sm font-medium">Rating Scale</span>
                            </div>
                            
                            <div 
                                class="flex items-center p-3 border border-gray-200 rounded-md cursor-grab hover:bg-gray-50 transition-colors"
                                draggable="true"
                                @@dragstart="dragStartFromToolbox($event, 'matrix')">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 10h16M4 14h16M4 18h16" />
                                </svg>
                                <span class="text-sm font-medium">Matrix Grid</span>
                            </div>
                        </div>
                    </div>
                    
                    <div class="space-y-1">
                        <label class="block text-sm font-medium text-gray-700">Layout Elements</label>
                        <div class="space-y-2">
                            <div 
                                class="flex items-center p-3 border border-gray-200 rounded-md cursor-grab hover:bg-gray-50 transition-colors"
                                draggable="true"
                                @@dragstart="dragStartFromToolbox($event, 'header')">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h8m-8 6h16" />
                                </svg>
                                <span class="text-sm font-medium">Section Header</span>
                            </div>
                            
                            <div 
                                class="flex items-center p-3 border border-gray-200 rounded-md cursor-grab hover:bg-gray-50 transition-colors"
                                draggable="true"
                                @@dragstart="dragStartFromToolbox($event, 'paragraph')">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 10h16M4 14h16M4 18h16" />
                                </svg>
                                <span class="text-sm font-medium">Text Block</span>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Properties Panel -->
                <div x-show="activeTab === 'properties'" class="p-4">
                    <div x-show="selectedElementIndex === null" class="text-center py-12 text-gray-500">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mx-auto mb-2 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 5a1 1 0 011-1h14a1 1 0 011 1v2a1 1 0 01-1 1H5a1 1 0 01-1-1V5zM4 13a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H5a1 1 0 01-1-1v-6zM16 13a1 1 0 011-1h2a1 1 0 011 1v6a1 1 0 01-1 1h-2a1 1 0 01-1-1v-6z" />
                        </svg>
                        <p>Select a form element to edit its properties</p>
                    </div>
                    
                    <div x-show="selectedElementIndex !== null" class="space-y-4">
                        <!-- Element type display -->
                        <div class="rounded-md bg-gray-50 px-3 py-2 flex items-center">
                            <template x-if="selectedElement">
                                <div class="flex items-center">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
                                    </svg>
                                    <span class="text-sm font-medium text-gray-700" x-text="getElementTypeName(selectedElement.type)"></span>
                                </div>
                            </template>
                        </div>
                        
                        <!-- Common properties -->
                        <div class="space-y-3">
                            <div x-show="selectedElement && !['header', 'paragraph'].includes(selectedElement.type)">
                                <label for="element-label" class="block text-sm font-medium text-gray-700 mb-1">Question/Label</label>
                                <input 
                                    type="text" 
                                    id="element-label" 
                                    x-model="selectedElement ? selectedElement.label : ''" 
                                    @@input="updateUnsavedChanges"
                                    class="block w-full shadow-sm border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                            </div>
                            
                            <div x-show="selectedElement && selectedElement.type === 'header'">
                                <label for="element-header" class="block text-sm font-medium text-gray-700 mb-1">Section Title</label>
                                <input 
                                    type="text" 
                                    id="element-header" 
                                    x-model="selectedElement ? selectedElement.label : ''" 
                                    @@input="updateUnsavedChanges"
                                    class="block w-full shadow-sm border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                            </div>
                            
                            <div x-show="selectedElement && selectedElement.type === 'paragraph'">
                                <label for="element-content" class="block text-sm font-medium text-gray-700 mb-1">Text Content</label>
                                <textarea 
                                    id="element-content" 
                                    x-model="selectedElement ? selectedElement.content : ''" 
                                    @@input="updateUnsavedChanges"
                                    rows="3"
                                    class="block w-full shadow-sm border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"></textarea>
                            </div>
                            
                            <div x-show="selectedElement && ['text', 'textarea', 'email', 'number', 'url', 'phone', 'select'].includes(selectedElement.type)">
                                <label for="element-placeholder" class="block text-sm font-medium text-gray-700 mb-1">Placeholder</label>
                                <input 
                                    type="text" 
                                    id="element-placeholder" 
                                    x-model="selectedElement ? selectedElement.placeholder : ''" 
                                    @@input="updateUnsavedChanges"
                                    class="block w-full shadow-sm border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                            </div>
                            
                            <div x-show="selectedElement && selectedElement.type !== 'paragraph'">
                                <label for="element-help-text" class="block text-sm font-medium text-gray-700 mb-1">Help Text</label>
                                <input 
                                    type="text" 
                                    id="element-help-text" 
                                    x-model="selectedElement ? selectedElement.helpText : ''" 
                                    @@input="updateUnsavedChanges"
                                    class="block w-full shadow-sm border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                            </div>
                            
                            <div x-show="selectedElement && !['header', 'paragraph'].includes(selectedElement.type)" class="flex items-center">
                                <input 
                                    type="checkbox" 
                                    id="element-required" 
                                    x-model="selectedElement ? selectedElement.required : false" 
                                    @@change="updateUnsavedChanges"
                                    class="h-4 w-4 text-indigo-600 border-gray-300 rounded focus:ring-indigo-500">
                                <label for="element-required" class="ml-2 block text-sm text-gray-700">Required</label>
                            </div>
                        </div>
                        
                        <!-- Type-specific properties -->
                        <template x-if="selectedElement && ['select', 'radio', 'checkbox'].includes(selectedElement.type)">
                            <div>
                                <div class="flex justify-between items-center mb-2">
                                    <label class="block text-sm font-medium text-gray-700">Options</label>
                                    <button 
                                        type="button" 
                                        @@click="addOption" 
                                        class="text-sm text-indigo-600 hover:text-indigo-900 flex items-center">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                                        </svg>
                                        Add Option
                                    </button>
                                </div>
                                <div class="space-y-2">
                                    <template x-for="(option, optionIndex) in selectedElement.options" :key="optionIndex">
                                        <div class="flex gap-2">
                                            <input 
                                                type="text" 
                                                x-model="option.label" 
                                                placeholder="Label" 
                                               @@input="updateUnsavedChanges"
                                                class="block flex-grow shadow-sm border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500 text-sm">
                                            <input 
                                                type="text" 
                                                x-model="option.value" 
                                                placeholder="Value" 
                                                @@input="updateUnsavedChanges"
                                                class="block w-24 shadow-sm border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500 text-sm">
                                            <button 
                                                type="button" 
                                                @@click="removeOption(optionIndex)" 
                                                :disabled="selectedElement.options.length <= 1"
                                                :class="{'opacity-50 cursor-not-allowed': selectedElement.options.length <= 1}"
                                                class="text-gray-400 hover:text-red-600">
                                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                                                </svg>
                                            </button>
                                        </div>
                                    </template>
                                </div>
                            </div>
                        </template>
                        
                        <template x-if="selectedElement && selectedElement.type === 'file'">
                            <div>
                                <label for="element-accepted-files" class="block text-sm font-medium text-gray-700 mb-1">Accepted Files</label>
                                <input 
                                    type="text" 
                                    id="element-accepted-files" 
                                    x-model="selectedElement.acceptedFiles" 
                                    @@input="updateUnsavedChanges"
                                    placeholder="e.g., PDF, DOC, DOCX up to 10MB" 
                                    class="block w-full shadow-sm border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                            </div>
                        </template>
                        
                        <template x-if="selectedElement && selectedElement.type === 'rating'">
                            <div class="space-y-3">
                                <div>
                                    <label for="element-max-rating" class="block text-sm font-medium text-gray-700 mb-1">Maximum Rating</label>
                                    <input 
                                        type="number" 
                                        id="element-max-rating" 
                                        x-model="selectedElement.maxRating || 5" 
                                        @@input="updateUnsavedChanges"
                                        min="3" 
                                        max="10" 
                                        class="block w-full shadow-sm border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                                </div>
                                <div>
                                    <label for="element-min-label" class="block text-sm font-medium text-gray-700 mb-1">Minimum Label</label>
                                    <input 
                                        type="text" 
                                        id="element-min-label" 
                                        x-model="selectedElement.minLabel || 'Low'" 
                                        @@input="updateUnsavedChanges"
                                        class="block w-full shadow-sm border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                                </div>
                                <div>
                                    <label for="element-max-label" class="block text-sm font-medium text-gray-700 mb-1">Maximum Label</label>
                                    <input 
                                        type="text" 
                                        id="element-max-label" 
                                        x-model="selectedElement.maxLabel || 'High'" 
                                        @@input="updateUnsavedChanges"
                                        class="block w-full shadow-sm border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                                </div>
                            </div>
                        </template>
                        
                        <template x-if="selectedElement && selectedElement.type === 'matrix'">
                            <div class="space-y-4">
                                <div>
                                    <div class="flex justify-between items-center mb-2">
                                        <label class="block text-sm font-medium text-gray-700">Rows</label>
                                        <button 
                                            type="button" 
                                            @@click="addMatrixRow" 
                                            class="text-sm text-indigo-600 hover:text-indigo-900 flex items-center">
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                                            </svg>
                                            Add Row
                                        </button>
                                    </div>
                                    <div class="space-y-2">
                                        <template x-for="(row, rowIndex) in (selectedElement.rows || [])" :key="rowIndex">
                                            <div class="flex items-center gap-2">
                                                <input 
                                                    type="text" 
                                                    x-model="row.label" 
                                                    placeholder="Row label" 
                                                    @@input="updateUnsavedChanges"
                                                    class="block flex-grow shadow-sm border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500 text-sm">
                                                <button 
                                                    type="button" 
                                                    @@click="removeMatrixRow(rowIndex)" 
                                                    :disabled="(selectedElement.rows || []).length <= 1"
                                                    :class="{'opacity-50 cursor-not-allowed': (selectedElement.rows || []).length <= 1}"
                                                    class="text-gray-400 hover:text-red-600">
                                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                                                    </svg>
                                                </button>
                                            </div>
                                        </template>
                                    </div>
                                </div>
                                
                                <div>
                                    <div class="flex justify-between items-center mb-2">
                                        <label class="block text-sm font-medium text-gray-700">Columns</label>
                                        <button 
                                            type="button" 
                                            @@click="addMatrixColumn" 
                                            class="text-sm text-indigo-600 hover:text-indigo-900 flex items-center">
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                                            </svg>
                                            Add Column
                                        </button>
                                    </div>
                                    <div class="space-y-2">
                                        <template x-for="(column, columnIndex) in (selectedElement.columns || [])" :key="columnIndex">
                                            <div class="flex items-center gap-2">
                                                <input 
                                                    type="text" 
                                                    x-model="column.label" 
                                                    placeholder="Column label" 
                                                    @@input="updateUnsavedChanges"
                                                    class="block flex-grow shadow-sm border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500 text-sm">
                                                <button 
                                                    type="button" 
                                                    @@click="removeMatrixColumn(columnIndex)" 
                                                    :disabled="(selectedElement.columns || []).length <= 1"
                                                    :class="{'opacity-50 cursor-not-allowed': (selectedElement.columns || []).length <= 1}"
                                                    class="text-gray-400 hover:text-red-600">
                                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                                                    </svg>
                                                </button>
                                            </div>
                                        </template>
                                    </div>
                                </div>
                            </div>
                        </template>
                        
                        <!-- Element specific validations -->
                        <template x-if="selectedElement && ['text', 'textarea', 'email', 'number', 'url', 'phone'].includes(selectedElement.type)">
                            <div class="pt-2 border-t border-gray-200">
                                <label class="block text-sm font-medium text-gray-700 mb-2">Validations</label>
                                <div class="space-y-3">
                                    <div x-show="selectedElement && ['text', 'textarea'].includes(selectedElement.type)">
                                        <div class="flex items-center mb-2">
                                            <input 
                                                type="checkbox" 
                                                id="validation-min-length" 
                                                x-model="selectedElement.validation ? selectedElement.validation.minLength.enabled : false" 
                                                @@change="toggleValidation('minLength')"
                                                class="h-4 w-4 text-indigo-600 border-gray-300 rounded focus:ring-indigo-500">
                                            <label for="validation-min-length" class="ml-2 block text-sm text-gray-700">Minimum length</label>
                                        </div>
                                        <div x-show="selectedElement.validation && selectedElement.validation.minLength.enabled" class="ml-6">
                                            <input 
                                                type="number" 
                                                min="1" 
                                                x-model="selectedElement.validation.minLength.value" 
                                                @@input="updateUnsavedChanges"
                                                class="block w-full shadow-sm border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                                        </div>
                                    </div>
                                    
                                    <div x-show="selectedElement && ['text', 'textarea'].includes(selectedElement.type)">
                                        <div class="flex items-center mb-2">
                                            <input 
                                                type="checkbox" 
                                                id="validation-max-length" 
                                                x-model="selectedElement.validation ? selectedElement.validation.maxLength.enabled : false" 
                                                @@change="toggleValidation('maxLength')"
                                                class="h-4 w-4 text-indigo-600 border-gray-300 rounded focus:ring-indigo-500">
                                            <label for="validation-max-length" class="ml-2 block text-sm text-gray-700">Maximum length</label>
                                        </div>
                                        <div x-show="selectedElement.validation && selectedElement.validation.maxLength.enabled" class="ml-6">
                                            <input 
                                                type="number" 
                                                min="1" 
                                                x-model="selectedElement.validation.maxLength.value" 
                                                @@input="updateUnsavedChanges"
                                                class="block w-full shadow-sm border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                                        </div>
                                    </div>
                                    
                                    <div x-show="selectedElement && selectedElement.type === 'number'">
                                        <div class="flex items-center mb-2">
                                            <input 
                                                type="checkbox" 
                                                id="validation-min-value" 
                                                x-model="selectedElement.validation ? selectedElement.validation.minValue.enabled : false" 
                                                @@change="toggleValidation('minValue')"
                                                class="h-4 w-4 text-indigo-600 border-gray-300 rounded focus:ring-indigo-500">
                                            <label for="validation-min-value" class="ml-2 block text-sm text-gray-700">Minimum value</label>
                                        </div>
                                        <div x-show="selectedElement.validation && selectedElement.validation.minValue.enabled" class="ml-6">
                                            <input 
                                                type="number" 
                                                x-model="selectedElement.validation.minValue.value" 
                                                @@input="updateUnsavedChanges"
                                                class="block w-full shadow-sm border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                                        </div>
                                    </div>
                                    
                                    <div x-show="selectedElement && selectedElement.type === 'number'">
                                        <div class="flex items-center mb-2">
                                            <input 
                                                type="checkbox" 
                                                id="validation-max-value" 
                                                x-model="selectedElement.validation ? selectedElement.validation.maxValue.enabled : false" 
                                                @@change="toggleValidation('maxValue')"
                                                class="h-4 w-4 text-indigo-600 border-gray-300 rounded focus:ring-indigo-500">
                                            <label for="validation-max-value" class="ml-2 block text-sm text-gray-700">Maximum value</label>
                                        </div>
                                        <div x-show="selectedElement.validation && selectedElement.validation.maxValue.enabled" class="ml-6">
                                            <input 
                                                type="number" 
                                                x-model="selectedElement.validation.maxValue.value" 
                                                @@input="updateUnsavedChanges"
                                                class="block w-full shadow-sm border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                                        </div>
                                    </div>
                                    
                                    <div x-show="selectedElement && selectedElement.type === 'text'">
                                        <div class="flex items-center">
                                            <input 
                                                type="checkbox" 
                                                id="validation-pattern" 
                                                x-model="selectedElement.validation ? selectedElement.validation.pattern.enabled : false" 
                                                @@change="toggleValidation('pattern')"
                                                class="h-4 w-4 text-indigo-600 border-gray-300 rounded focus:ring-indigo-500">
                                            <label for="validation-pattern" class="ml-2 block text-sm text-gray-700">Match pattern (regex)</label>
                                        </div>
                                        <div x-show="selectedElement.validation && selectedElement.validation.pattern.enabled" class="ml-6 mt-2">
                                            <input 
                                                type="text" 
                                                x-model="selectedElement.validation.pattern.value" 
                                                @@input="updateUnsavedChanges"
                                                placeholder="e.g. [A-Za-z0-9]+"
                                                class="block w-full shadow-sm border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </template>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Preview Modal -->
    <div 
        x-show="showPreview" 
        class="fixed inset-0 z-50 overflow-y-auto" 
        aria-labelledby="modal-title" 
        role="dialog" 
        aria-modal="true" 
        style="display: none;">
        <div 
            class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0"
            x-transition:enter="ease-out duration-300"
            x-transition:enter-start="opacity-0"
            x-transition:enter-end="opacity-100"
            x-transition:leave="ease-in duration-200"
            x-transition:leave-start="opacity-100"
            x-transition:leave-end="opacity-0">
            <div 
                @@click="showPreview = false" 
                class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" 
                aria-hidden="true">
            </div>
            
            <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
            
            <div 
                class="inline-block align-bottom bg-white rounded-lg px-4 pt-5 pb-4 text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-3xl sm:w-full sm:p-6"
                x-transition:enter="ease-out duration-300"
                x-transition:enter-start="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
                x-transition:enter-end="opacity-100 translate-y-0 sm:scale-100"
                x-transition:leave="ease-in duration-200"
                x-transition:leave-start="opacity-100 translate-y-0 sm:scale-100"
                x-transition:leave-end="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95">
                
                <div class="absolute top-0 right-0 pt-4 pr-4">
                    <button 
                        type="button" 
                        @@click="showPreview = false" 
                        class="bg-white rounded-md text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                        <span class="sr-only">Close</span>
                        <svg class="h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                        </svg>
                    </button>
                </div>
                
                <div class="sm:flex sm:items-start">
                    <div class="mt-3 text-center sm:mt-0 sm:text-left w-full">
                        <h3 class="text-lg leading-6 font-medium text-gray-900" id="modal-title">
                            Form Preview
                        </h3>
                        <div class="mt-4 border-t border-gray-200 pt-4">
                            <h2 class="text-xl font-semibold text-gray-900" x-text="formTitle || 'Untitled Form'"></h2>
                            <p class="text-gray-500 mt-1" x-text="formDescription || 'No description provided'"></p>
                            
                            <form class="mt-6 space-y-6">
                                <template x-for="(element, index) in formElements" :key="element.id">
                                    <div class="space-y-1">
                                        <!-- Text Input -->
                                        <template x-if="element.type === 'text'">
                                            <div>
                                                <label :for="`preview-${element.id}`" class="block text-sm font-medium text-gray-700">
                                                    <span x-text="element.label || 'Text Input'"></span>
                                                    <span x-show="element.required" class="text-red-500"> *</span>
                                                </label>
                                                <input type="text" :id="`preview-${element.id}`" :placeholder="element.placeholder || ''" class="mt-1 block w-full shadow-sm border-gray-300 rounded-md">
                                                <p x-show="element.helpText" class="mt-1 text-xs text-gray-500" x-text="element.helpText"></p>
                                            </div>
                                        </template>
                                        
                                        <!-- Textarea -->
                                        <template x-if="element.type === 'textarea'">
                                            <div>
                                                <label :for="`preview-${element.id}`" class="block text-sm font-medium text-gray-700">
                                                    <span x-text="element.label || 'Paragraph'"></span>
                                                    <span x-show="element.required" class="text-red-500"> *</span>
                                                </label>
                                                <textarea :id="`preview-${element.id}`" :placeholder="element.placeholder || ''" rows="3" class="mt-1 block w-full shadow-sm border-gray-300 rounded-md"></textarea>
                                                <p x-show="element.helpText" class="mt-1 text-xs text-gray-500" x-text="element.helpText"></p>
                                            </div>
                                        </template>
                                        
                                        <!-- Select -->
                                        <template x-if="element.type === 'select'">
                                            <div>
                                                <label :for="`preview-${element.id}`" class="block text-sm font-medium text-gray-700">
                                                    <span x-text="element.label || 'Dropdown'"></span>
                                                    <span x-show="element.required" class="text-red-500"> *</span>
                                                </label>
                                                <select :id="`preview-${element.id}`" class="mt-1 block w-full shadow-sm border-gray-300 rounded-md">
                                                    <option value="" disabled selected x-text="element.placeholder || 'Select an option'"></option>
                                                    <template x-for="option in element.options" :key="option.value">
                                                        <option :value="option.value" x-text="option.label"></option>
                                                    </template>
                                                </select>
                                                <p x-show="element.helpText" class="mt-1 text-xs text-gray-500" x-text="element.helpText"></p>
                                            </div>
                                        </template>
                                        
                                        <!-- Radio Group -->
                                        <template x-if="element.type === 'radio'">
                                            <div>
                                                <label class="block text-sm font-medium text-gray-700">
                                                    <span x-text="element.label || 'Multiple Choice'"></span>
                                                    <span x-show="element.required" class="text-red-500"> *</span>
                                                </label>
                                                <div class="mt-2 space-y-2">
                                                    <template x-for="option in element.options" :key="option.value">
                                                        <div class="flex items-center">
                                                            <input :id="`preview-${element.id}-${option.value}`" :name="`preview-${element.id}`" type="radio" :value="option.value" class="h-4 w-4 text-indigo-600 border-gray-300 focus:ring-indigo-500">
                                                            <label :for="`preview-${element.id}-${option.value}`" class="ml-2 block text-sm text-gray-700" x-text="option.label"></label>
                                                        </div>
                                                    </template>
                                                </div>
                                                <p x-show="element.helpText" class="mt-1 text-xs text-gray-500" x-text="element.helpText"></p>
                                            </div>
                                        </template>
                                        
                                        <!-- Checkbox Group -->
                                        <template x-if="element.type === 'checkbox'">
                                            <div>
                                                <label class="block text-sm font-medium text-gray-700">
                                                    <span x-text="element.label || 'Checkboxes'"></span>
                                                    <span x-show="element.required" class="text-red-500"> *</span>
                                                </label>
                                                <div class="mt-2 space-y-2">
                                                    <template x-for="option in element.options" :key="option.value">
                                                        <div class="flex items-center">
                                                            <input :id="`preview-${element.id}-${option.value}`" :name="`preview-${element.id}-${option.value}`" type="checkbox" :value="option.value" class="h-4 w-4 text-indigo-600 border-gray-300 rounded focus:ring-indigo-500">
                                                            <label :for="`preview-${element.id}-${option.value}`" class="ml-2 block text-sm text-gray-700" x-text="option.label"></label>
                                                        </div>
                                                    </template>
                                                </div>
                                                <p x-show="element.helpText" class="mt-1 text-xs text-gray-500" x-text="element.helpText"></p>
                                            </div>
                                        </template>
                                        
                                        <!-- Date Picker -->
                                        <template x-if="element.type === 'date'">
                                            <div>
                                                <label :for="`preview-${element.id}`" class="block text-sm font-medium text-gray-700">
                                                    <span x-text="element.label || 'Date'"></span>
                                                    <span x-show="element.required" class="text-red-500"> *</span>
                                                </label>
                                                <input type="date" :id="`preview-${element.id}`" class="mt-1 block w-full shadow-sm border-gray-300 rounded-md">
                                                <p x-show="element.helpText" class="mt-1 text-xs text-gray-500" x-text="element.helpText"></p>
                                            </div>
                                        </template>
                                        
                                        <!-- File Upload -->
                                        <template x-if="element.type === 'file'">
                                            <div>
                                                <label :for="`preview-${element.id}`" class="block text-sm font-medium text-gray-700">
                                                    <span x-text="element.label || 'File Upload'"></span>
                                                    <span x-show="element.required" class="text-red-500"> *</span>
                                                </label>
                                                <div class="mt-1 flex justify-center px-6 pt-5 pb-6 border-2 border-gray-300 border-dashed rounded-md">
                                                    <div class="space-y-1 text-center">
                                                        <svg class="mx-auto h-12 w-12 text-gray-400" stroke="currentColor" fill="none" viewBox="0 0 24 24">
                                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                                                        </svg>
                                                        <div class="flex text-sm text-gray-600 justify-center">
                                                            <label :for="`preview-${element.id}`" class="relative cursor-pointer bg-white rounded-md font-medium text-indigo-600 hover:text-indigo-500 focus-within:outline-none focus-within:ring-2 focus-within:ring-offset-2 focus-within:ring-indigo-500">
                                                                <span>Upload a file</span>
                                                                <input :id="`preview-${element.id}`" name="file" type="file" class="sr-only">
                                                            </label>
                                                            <p class="pl-1">or drag and drop</p>
                                                        </div>
                                                        <p class="text-xs text-gray-500" x-text="element.acceptedFiles || 'PNG, JPG, GIF, PDF up to 10MB'"></p>
                                                    </div>
                                                </div>
                                                <p x-show="element.helpText" class="mt-1 text-xs text-gray-500" x-text="element.helpText"></p>
                                            </div>
                                        </template>

                                        <!-- Number Input -->
                                        <template x-if="element.type === 'number'">
                                            <div>
                                                <label :for="`preview-${element.id}`" class="block text-sm font-medium text-gray-700">
                                                    <span x-text="element.label || 'Number'"></span>
                                                    <span x-show="element.required" class="text-red-500"> *</span>
                                                </label>
                                                <input type="number" :id="`preview-${element.id}`" :placeholder="element.placeholder || ''" class="mt-1 block w-full shadow-sm border-gray-300 rounded-md">
                                                <p x-show="element.helpText" class="mt-1 text-xs text-gray-500" x-text="element.helpText"></p>
                                            </div>
                                        </template>

                                        <!-- Email Input -->
                                        <template x-if="element.type === 'email'">
                                            <div>
                                                <label :for="`preview-${element.id}`" class="block text-sm font-medium text-gray-700">
                                                    <span x-text="element.label || 'Email'"></span>
                                                    <span x-show="element.required" class="text-red-500"> *</span>
                                                </label>
                                                <input type="email" :id="`preview-${element.id}`" :placeholder="element.placeholder || ''" class="mt-1 block w-full shadow-sm border-gray-300 rounded-md">
                                                <p x-show="element.helpText" class="mt-1 text-xs text-gray-500" x-text="element.helpText"></p>
                                            </div>
                                        </template>

                                        <!-- Phone Input -->
                                        <template x-if="element.type === 'phone'">
                                            <div>
                                                <label :for="`preview-${element.id}`" class="block text-sm font-medium text-gray-700">
                                                    <span x-text="element.label || 'Phone'"></span>
                                                    <span x-show="element.required" class="text-red-500"> *</span>
                                                </label>
                                                <input type="tel" :id="`preview-${element.id}`" :placeholder="element.placeholder || ''" class="mt-1 block w-full shadow-sm border-gray-300 rounded-md">
                                                <p x-show="element.helpText" class="mt-1 text-xs text-gray-500" x-text="element.helpText"></p>
                                            </div>
                                        </template>

                                        <!-- URL Input -->
                                        <template x-if="element.type === 'url'">
                                            <div>
                                                <label :for="`preview-${element.id}`" class="block text-sm font-medium text-gray-700">
                                                    <span x-text="element.label || 'Website URL'"></span>
                                                    <span x-show="element.required" class="text-red-500"> *</span>
                                                </label>
                                                <input type="url" :id="`preview-${element.id}`" :placeholder="element.placeholder || ''" class="mt-1 block w-full shadow-sm border-gray-300 rounded-md">
                                                <p x-show="element.helpText" class="mt-1 text-xs text-gray-500" x-text="element.helpText"></p>
                                            </div>
                                        </template>

                                        <!-- Rating Scale -->
                                        <template x-if="element.type === 'rating'">
                                            <div>
                                                <label class="block text-sm font-medium text-gray-700">
                                                    <span x-text="element.label || 'Rating'"></span>
                                                    <span x-show="element.required" class="text-red-500"> *</span>
                                                </label>
                                                <div class="mt-2">
                                                    <div class="flex space-x-2">
                                                        <template x-for="i in (element.maxRating || 5)" :key="i">
                                                            <button type="button" class="rounded-full h-8 w-8 flex items-center justify-center border border-gray-300 hover:bg-indigo-50 focus:outline-none focus:ring-2 focus:ring-indigo-500">
                                                                <span x-text="i"></span>
                                                            </button>
                                                        </template>
                                                    </div>
                                                    <div class="flex justify-between mt-1">
                                                        <span class="text-xs text-gray-500" x-text="element.minLabel || 'Low'"></span>
                                                        <span class="text-xs text-gray-500" x-text="element.maxLabel || 'High'"></span>
                                                    </div>
                                                </div>
                                                <p x-show="element.helpText" class="mt-1 text-xs text-gray-500" x-text="element.helpText"></p>
                                            </div>
                                        </template>

                                        <!-- Section Header -->
                                        <template x-if="element.type === 'header'">
                                            <div class="border-b border-gray-200 pb-2">
                                                <h3 class="text-lg font-medium text-gray-900" x-text="element.label || 'Section Header'"></h3>
                                                <p x-show="element.helpText" class="mt-1 text-sm text-gray-500" x-text="element.helpText"></p>
                                            </div>
                                        </template>

                                        <!-- Paragraph Text -->
                                        <template x-if="element.type === 'paragraph'">
                                            <div>
                                                <p class="text-sm text-gray-500" x-text="element.content || 'Paragraph text goes here...'"></p>
                                            </div>
                                        </template>

                                        <!-- Matrix/Grid -->
                                        <template x-if="element.type === 'matrix'">
                                            <div>
                                                <label class="block text-sm font-medium text-gray-700">
                                                    <span x-text="element.label || 'Matrix Grid'"></span>
                                                    <span x-show="element.required" class="text-red-500"> *</span>
                                                </label>
                                                <div class="mt-2 overflow-x-auto">
                                                    <table class="min-w-full divide-y divide-gray-200">
                                                        <thead class="bg-gray-50">
                                                            <tr>
                                                                <th scope="col" class="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"></th>
                                                                <template x-for="column in (element.columns || [])" :key="column.value">
                                                                    <th scope="col" class="px-3 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider" x-text="column.label"></th>
                                                                </template>
                                                            </tr>
                                                        </thead>
                                                        <tbody class="bg-white divide-y divide-gray-200">
                                                            <template x-for="row in (element.rows || [])" :key="row.value">
                                                                <tr>
                                                                    <td class="px-3 py-3 whitespace-nowrap text-sm font-medium text-gray-900" x-text="row.label"></td>
                                                                    <template x-for="column in (element.columns || [])" :key="column.value">
                                                                        <td class="px-3 py-3 whitespace-nowrap text-center text-sm text-gray-500">
                                                                            <input :name="`matrix-${element.id}-${row.value}`" type="radio" class="h-4 w-4 text-indigo-600 border-gray-300 focus:ring-indigo-500">
                                                                        </td>
                                                                    </template>
                                                                </tr>
                                                            </template>
                                                        </tbody>
                                                    </table>
                                                </div>
                                                <p x-show="element.helpText" class="mt-1 text-xs text-gray-500" x-text="element.helpText"></p>
                                            </div>
                                        </template>
                                    </div>
                                </template>
                                
                                <div class="pt-4 flex justify-end">
                                    <button type="button" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                                        Submit
                                    </button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Confirm delete modal -->
    <div 
        x-show="showDeleteConfirm" 
        class="fixed inset-0 z-50 overflow-y-auto" 
        aria-labelledby="modal-title" 
        role="dialog" 
        aria-modal="true" 
        style="display: none;">
        <div 
            class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0"
            x-transition:enter="ease-out duration-300"
            x-transition:enter-start="opacity-0"
            x-transition:enter-end="opacity-100"
            x-transition:leave="ease-in duration-200"
            x-transition:leave-start="opacity-100"
            x-transition:leave-end="opacity-0">
            <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" aria-hidden="true"></div>
            
            <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
            
            <div 
                class="inline-block align-bottom bg-white rounded-lg px-4 pt-5 pb-4 text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full sm:p-6"
                x-transition:enter="ease-out duration-300"
                x-transition:enter-start="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
                x-transition:enter-end="opacity-100 translate-y-0 sm:scale-100"
                x-transition:leave="ease-in duration-200"
                x-transition:leave-start="opacity-100 translate-y-0 sm:scale-100"
                x-transition:leave-end="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95">
                <div class="sm:flex sm:items-start">
                    <div class="mx-auto flex-shrink-0 flex items-center justify-center h-12 w-12 rounded-full bg-red-100 sm:mx-0 sm:h-10 sm:w-10">
                        <svg class="h-6 w-6 text-red-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                        </svg>
                    </div>
                    <div class="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left">
                        <h3 class="text-lg leading-6 font-medium text-gray-900" id="modal-title">
                            Confirm Deletion
                        </h3>
                        <div class="mt-2">
                            <p class="text-sm text-gray-500">
                                Are you sure you want to clear all form elements? This action cannot be undone.
                            </p>
                        </div>
                    </div>
                </div>
                <div class="mt-5 sm:mt-4 sm:flex sm:flex-row-reverse">
                    <button 
                        type="button" 
                        @@click="confirmClearForm"
                        class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-red-600 text-base font-medium text-white hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 sm:ml-3 sm:w-auto sm:text-sm">
                        Delete
                    </button>
                    <button 
                        type="button" 
                        @@click="showDeleteConfirm = false" 
                        class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:w-auto sm:text-sm">
                        Cancel
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Unsaved changes warning modal -->
    <div 
        x-show="showUnsavedWarning" 
        class="fixed inset-0 z-50 overflow-y-auto" 
        aria-labelledby="modal-title" 
        role="dialog" 
        aria-modal="true" 
        style="display: none;">
        <div 
            class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0"
            x-transition:enter="ease-out duration-300"
            x-transition:enter-start="opacity-0"
            x-transition:enter-end="opacity-100"
            x-transition:leave="ease-in duration-200"
            x-transition:leave-start="opacity-100"
            x-transition:leave-end="opacity-0">
            <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" aria-hidden="true"></div>
            
            <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
            
            <div 
                class="inline-block align-bottom bg-white rounded-lg px-4 pt-5 pb-4 text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full sm:p-6"
                x-transition:enter="ease-out duration-300"
                x-transition:enter-start="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
                x-transition:enter-end="opacity-100 translate-y-0 sm:scale-100"
                x-transition:leave="ease-in duration-200"
                x-transition:leave-start="opacity-100 translate-y-0 sm:scale-100"
                x-transition:leave-end="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95">
                <div class="sm:flex sm:items-start">
                    <div class="mx-auto flex-shrink-0 flex items-center justify-center h-12 w-12 rounded-full bg-yellow-100 sm:mx-0 sm:h-10 sm:w-10">
                        <svg class="h-6 w-6 text-yellow-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                        </svg>
                    </div>
                    <div class="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left">
                        <h3 class="text-lg leading-6 font-medium text-gray-900" id="modal-title">
                            Unsaved Changes
                        </h3>
                        <div class="mt-2">
                            <p class="text-sm text-gray-500">
                                You have unsaved changes that will be lost. Do you want to save your changes before continuing?
                            </p>
                        </div>
                    </div>
                </div>
                <div class="mt-5 sm:mt-4 sm:flex sm:flex-row-reverse">
                    <button 
                        type="button" 
                        @@click="saveBeforeContinue"
                        class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-indigo-600 text-base font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:ml-3 sm:w-auto sm:text-sm">
                        Save Changes
                    </button>
                    <button 
                        type="button" 
                        @@click="continueWithoutSaving" 
                        class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm">
                        Discard Changes
                    </button>
                    <button 
                        type="button" 
                        @@click="showUnsavedWarning = false" 
                        class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:w-auto sm:text-sm">
                        Cancel
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function formBuilder() {
            return {
                formId: '@(ViewData["FormId"])',
                formTitle: '',
                formDescription: '',
                formStatus: 'Draft',
                formElements: [],
                formSettings: {
                    allowAnonymous: true,
                    collectEmail: false,
                    sendConfirmation: false,
                    limitResponses: false,
                    responseLimit: 100
                },
                selectedElementIndex: null,
                isDraggingOver: false,
                isDragging: false,
                showPreview: false,
                showDeleteConfirm: false,
                showUnsavedWarning: false,
                draggedElementIndex: null,
                dropTargetIndex: null,
                dropTargetIndicatorPosition: 0,
                hasUnsavedChanges: false,
                undoStack: [],
                redoStack: [],
                pendingAction: null,
                
                init() {
                    // Listen for beforeunload event to warn about unsaved changes
                    window.addEventListener('beforeunload', (e) => {
                        if (this.hasUnsavedChanges) {
                            e.preventDefault();
                            e.returnValue = '';
                            return '';
                        }
                    });
                    
                    // Initialize with an empty form or load existing form if ID is provided
                    if (this.formId) {
                        this.loadForm();
                    }
                    
                    // Save state to undo stack
                    this.saveCurrentState();
                    
                    // Handle keyboard shortcuts
                    document.addEventListener('keydown', (e) => {
                        // Ctrl+Z or Cmd+Z for Undo
                        if ((e.ctrlKey || e.metaKey) && e.key === 'z' && !e.shiftKey) {
                            e.preventDefault();
                            this.undoAction();
                        }
                        
                        // Ctrl+Shift+Z or Cmd+Shift+Z for Redo
                        if ((e.ctrlKey || e.metaKey) && e.key === 'z' && e.shiftKey) {
                            e.preventDefault();
                            this.redoAction();
                        }
                        
                        // Ctrl+S or Cmd+S for Save
                        if ((e.ctrlKey || e.metaKey) && e.key === 's') {
                            e.preventDefault();
                            this.saveForm();
                        }
                    });
                    
                    // Use a MutationObserver to track drop target position
                    const formCanvas = this.$refs.formCanvas;
                    if (formCanvas) {
                        const observer = new MutationObserver(() => {
                            if (this.dropTargetIndex !== null && this.isDragging) {
                                this.updateDropTargetIndicator();
                            }
                        });
                        
                        observer.observe(formCanvas, { 
                            childList: true, 
                            subtree: true, 
                            attributes: true 
                        });
                    }
                },
                
                get selectedElement() {
                    return this.selectedElementIndex !== null ? this.formElements[this.selectedElementIndex] : null;
                },
                
                // Form management methods
                loadForm() {
                    // In a real application, this would fetch the form data from the server
                    fetch(`${document.querySelector('base')?.getAttribute('href') || '/'}api/forms/${this.formId}`)
                        .then(response => {
                            if (!response.ok) {
                                throw new Error(`Error fetching form: ${response.statusText}`);
                            }
                            return response.json();
                        })
                        .then(data => {
                            this.formTitle = data.title;
                            this.formDescription = data.description;
                            this.formStatus = data.status;
                            
                            // Parse the elements JSON
                            if (data.elementsJson) {
                                try {
                                    this.formElements = JSON.parse(data.elementsJson);
                                } catch (error) {
                                    console.error("Error parsing form elements:", error);
                                    this.formElements = [];
                                }
                            }
                            
                            // Save initial state
                            this.saveCurrentState();
                            this.hasUnsavedChanges = false;
                        })
                        .catch(error => {
                            console.error("Failed to load form:", error);
                            
                            // Fallback to sample data for development
                            this.loadSampleForm();
                        });
                },
                
                loadSampleForm() {
                    this.formTitle = 'Customer Feedback Form';
                    this.formDescription = 'Help us improve our products and services by sharing your feedback.';
                    this.formStatus = 'Draft';
                    
                    this.formElements = [
                        {
                            id: 'elem-1',
                            type: 'text',
                            label: 'Your Name',
                            placeholder: 'Enter your full name',
                            helpText: '',
                            required: true,
                            validation: {
                                minLength: { enabled: false, value: 3 },
                                maxLength: { enabled: false, value: 50 },
                                pattern: { enabled: false, value: '' }
                            }
                        },
                        {
                            id: 'elem-2',
                            type: 'email',
                            label: 'Email Address',
                            placeholder: 'Enter your email address',
                            helpText: 'We will only use your email if you request a response.',
                            required: true
                        },
                        {
                            id: 'elem-3',
                            type: 'radio',
                            label: 'How satisfied are you with our service?',
                            helpText: '',
                            required: true,
                            options: [
                                { label: 'Very Satisfied', value: '5' },
                                { label: 'Satisfied', value: '4' },
                                { label: 'Neutral', value: '3' },
                                { label: 'Dissatisfied', value: '2' },
                                { label: 'Very Dissatisfied', value: '1' }
                            ]
                        },
                        {
                            id: 'elem-4',
                            type: 'textarea',
                            label: 'What can we do to improve our service?',
                            placeholder: 'Your suggestions for improvement',
                            helpText: '',
                            required: false,
                            validation: {
                                minLength: { enabled: false, value: 10 },
                                maxLength: { enabled: false, value: 500 }
                            }
                        }
                    ];
                    
                    this.saveCurrentState();
                    this.hasUnsavedChanges = false;
                },
                
                saveForm() {
                    // Validate form
                    if (!this.formTitle.trim()) {
                        alert('Please enter a form title');
                        return;
                    }
                    
                    // In a real application, this would send the form data to the server
                    const formData = {
                        id: this.formId || '',
                        title: this.formTitle,
                        description: this.formDescription,
                        status: this.formStatus,
                        elementsJson: JSON.stringify(this.formElements),
                        settings: JSON.stringify(this.formSettings)
                    };
                    
                    const url = `${document.querySelector('base')?.getAttribute('href') || '/'}api/forms${this.formId ? `/${this.formId}` : ''}`;
                    const method = this.formId ? 'PUT' : 'POST';
                    
                    fetch(url, {
                        method: method,
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(formData)
                    })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`Error saving form: ${response.statusText}`);
                        }
                        
                        return response.json();
                    })
                    .then(data => {
                        // If this is a new form, update the URL
                        if (!this.formId && data.id) {
                            this.formId = data.id;
                            window.history.replaceState(null, '', `/FormBuilder/Edit/${data.id}`);
                        }
                        
                        this.hasUnsavedChanges = false;
                        
                        // Show success message
                        alert('Form saved successfully!');
                        
                        // Continue with pending action if any
                        if (this.pendingAction) {
                            const action = this.pendingAction;
                            this.pendingAction = null;
                            action();
                        }
                    })
                    .catch(error => {
                        console.error("Failed to save form:", error);
                        alert(`Failed to save form: ${error.message}`);
                    });
                },
                
                // History management methods
                saveCurrentState() {
                    const state = {
                        formTitle: this.formTitle,
                        formDescription: this.formDescription,
                        formStatus: this.formStatus,
                        formElements: JSON.parse(JSON.stringify(this.formElements)),
                        formSettings: JSON.parse(JSON.stringify(this.formSettings))
                    };
                    
                    this.undoStack.push(state);
                    this.redoStack = [];
                    
                    // Limit stack size
                    if (this.undoStack.length > 20) {
                        this.undoStack.shift();
                    }
                },
                
                undoAction() {
                    if (this.undoStack.length <= 1) return; // Keep at least one state in the stack
                    
                    // Save current state to redo stack
                    const currentState = {
                        formTitle: this.formTitle,
                        formDescription: this.formDescription,
                        formStatus: this.formStatus,
                        formElements: JSON.parse(JSON.stringify(this.formElements)),
                        formSettings: JSON.parse(JSON.stringify(this.formSettings))
                    };
                    
                    this.redoStack.push(currentState);
                    
                    // Pop the current state (which is the one we want to undo)
                    this.undoStack.pop();
                    
                    // Apply the previous state
                    const previousState = this.undoStack[this.undoStack.length - 1];
                    this.formTitle = previousState.formTitle;
                    this.formDescription = previousState.formDescription;
                    this.formStatus = previousState.formStatus;
                    this.formElements = JSON.parse(JSON.stringify(previousState.formElements));
                    this.formSettings = JSON.parse(JSON.stringify(previousState.formSettings));
                    
                    // Update UI state
                    this.selectedElementIndex = null;
                },
                
                redoAction() {
                    if (this.redoStack.length === 0) return;
                    
                    // Get the state to redo
                    const redoState = this.redoStack.pop();
                    
                    // Save current state to undo stack
                    const currentState = {
                        formTitle: this.formTitle,
                        formDescription: this.formDescription,
                        formStatus: this.formStatus,
                        formElements: JSON.parse(JSON.stringify(this.formElements)),
                        formSettings: JSON.parse(JSON.stringify(this.formSettings))
                    };
                    
                    this.undoStack.push(currentState);
                    
                    // Apply the redo state
                    this.formTitle = redoState.formTitle;
                    this.formDescription = redoState.formDescription;
                    this.formStatus = redoState.formStatus;
                    this.formElements = JSON.parse(JSON.stringify(redoState.formElements));
                    this.formSettings = JSON.parse(JSON.stringify(redoState.formSettings));
                    
                    // Update UI state
                    this.selectedElementIndex = null;
                },
                
                updateUnsavedChanges() {
                    this.hasUnsavedChanges = true;
                    this.saveCurrentState();
                },
                
                // Element management methods
                getElementTypeName(type) {
                    const typeNames = {
                        'text': 'Short Text',
                        'textarea': 'Paragraph',
                        'select': 'Dropdown',
                        'radio': 'Multiple Choice',
                        'checkbox': 'Checkboxes',
                        'file': 'File Upload',
                        'date': 'Date',
                        'number': 'Number',
                        'email': 'Email',
                        'phone': 'Phone',
                        'url': 'Website URL',
                        'rating': 'Rating Scale',
                        'matrix': 'Matrix Grid',
                        'header': 'Section Header',
                        'paragraph': 'Text Block'
                    };
                    
                    return typeNames[type] || 'Form Element';
                },
                
                createNewElement(type) {
                    const element = {
                        id: `elem-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
                        type,
                        label: this.getElementTypeName(type),
                        placeholder: '',
                        helpText: '',
                        required: false
                    };
                    
                    // Add options for select, radio, and checkbox types
                    if (['select', 'radio', 'checkbox'].includes(type)) {
                        element.options = [
                            { label: 'Option 1', value: 'option1' },
                            { label: 'Option 2', value: 'option2' },
                            { label: 'Option 3', value: 'option3' }
                        ];
                    }
                    
                    // Add special properties for specific element types
                    if (['text', 'textarea'].includes(type)) {
                        element.validation = {
                            minLength: { enabled: false, value: 0 },
                            maxLength: { enabled: false, value: 0 },
                            pattern: { enabled: false, value: '' }
                        };
                    }
                    
                    if (type === 'number') {
                        element.validation = {
                            minValue: { enabled: false, value: 0 },
                            maxValue: { enabled: false, value: 0 }
                        };
                    }
                    
                    if (type === 'rating') {
                        element.maxRating = 5;
                        element.minLabel = 'Low';
                        element.maxLabel = 'High';
                    }
                    
                    if (type === 'matrix') {
                        element.rows = [
                            { label: 'Row 1', value: 'row1' },
                            { label: 'Row 2', value: 'row2' },
                            { label: 'Row 3', value: 'row3' }
                        ];
                        element.columns = [
                            { label: 'Column 1', value: 'col1' },
                            { label: 'Column 2', value: 'col2' },
                            { label: 'Column 3', value: 'col3' }
                        ];
                    }
                    
                    if (type === 'paragraph') {
                        element.content = 'Enter your text here...';
                    }
                    
                    return element;
                },
                
                // Drag-and-drop methods
                dragStartFromToolbox(event, elementType) {
                    event.dataTransfer.setData('elementType', elementType);
                    event.dataTransfer.effectAllowed = 'copy';
                    this.isDragging = true;
                },
                
                dragStart(event, index) {
                    this.draggedElementIndex = index;
                    event.dataTransfer.effectAllowed = 'move';
                    event.dataTransfer.setData('text/plain', index.toString());
                    
                    // Add a delay to set isDragging to avoid flickering
                    setTimeout(() => {
                        this.isDragging = true;
                    }, 0);
                },
                
                dragEnd(event) {
                    this.isDragging = false;
                    this.draggedElementIndex = null;
                    this.dropTargetIndex = null;
                },
                
                dragOver(event) {
                    event.preventDefault();
                    this.isDraggingOver = true;
                    
                    const formCanvas = this.$refs.formCanvas;
                    const formRect = formCanvas.getBoundingClientRect();
                    const y = event.clientY - formRect.top;
                    
                    // Find the closest element to the drop position
                    const elements = Array.from(formCanvas.querySelectorAll("[id^='element-']"));
                    let targetIndex = this.formElements.length;
                    let minDistance = Infinity;
                    
                    elements.forEach((el, i) => {
                        const rect = el.getBoundingClientRect();
                        const elTop = rect.top - formRect.top;
                        const elBottom = elTop + rect.height;
                        const midPoint = elTop + rect.height / 2;
                        
                        // Calculate where the indicator should appear - above or below the element
                        const distance = Math.abs(y - midPoint);
                        
                        if (distance < minDistance) {
                            minDistance = distance;
                            targetIndex = y < midPoint ? i : i + 1;
                            
                            // If dragging an existing element, adjust the index
                            if (this.draggedElementIndex !== null && targetIndex > this.draggedElementIndex) {
                                targetIndex--;
                            }
                        }
                    });
                    
                    // Update position of drop indicator
                    this.dropTargetIndex = Math.min(targetIndex, this.formElements.length);
                    this.updateDropTargetIndicator();
                },
                
                updateDropTargetIndicator() {
                    const formCanvas = this.$refs.formCanvas;
                    const elements = Array.from(formCanvas.querySelectorAll("[id^='element-']"));
                    
                    if (this.dropTargetIndex === 0 && elements.length > 0) {
                        // Position at the top
                        const firstEl = elements[0];
                        const rect = firstEl.getBoundingClientRect();
                        const formRect = formCanvas.getBoundingClientRect();
                        this.dropTargetIndicatorPosition = rect.top - formRect.top - 12;
                    } else if (this.dropTargetIndex >= elements.length && elements.length > 0) {
                        // Position at the bottom
                        const lastEl = elements[elements.length - 1];
                        const rect = lastEl.getBoundingClientRect();
                        const formRect = formCanvas.getBoundingClientRect();
                        this.dropTargetIndicatorPosition = rect.bottom - formRect.top + 8;
                    } else if (elements.length > 0 && this.dropTargetIndex > 0) {
                        // Position between elements
                        const aboveEl = elements[this.dropTargetIndex - 1];
                        const rect = aboveEl.getBoundingClientRect();
                        const formRect = formCanvas.getBoundingClientRect();
                        this.dropTargetIndicatorPosition = rect.bottom - formRect.top + 8;
                    } else {
                        // Default position for empty canvas
                        this.dropTargetIndicatorPosition = 50;
                    }
                },
                
                dragLeave(event) {
                    // Only set isDraggingOver to false if we're leaving the form canvas
                    const formCanvas = this.$refs.formCanvas;
                    const relatedTarget = event.relatedTarget;
                    
                    if (!formCanvas.contains(relatedTarget)) {
                        this.isDraggingOver = false;
                        this.dropTargetIndex = null;
                    }
                },
                
                drop(event) {
                    event.preventDefault();
                    this.isDraggingOver = false;
                    this.isDragging = false;
                    
                    // Check if this is a new element from the toolbox
                    const elementType = event.dataTransfer.getData('elementType');
                    if (elementType) {
                        const newElement = this.createNewElement(elementType);
                        
                        if (this.dropTargetIndex !== null) {
                            // Insert at specific position
                            this.formElements.splice(this.dropTargetIndex, 0, newElement);
                            this.selectedElementIndex = this.dropTargetIndex;
                        } else {
                            // Add to end
                            this.formElements.push(newElement);
                            this.selectedElementIndex = this.formElements.length - 1;
                        }
                        
                        this.updateUnsavedChanges();
                        this.dropTargetIndex = null;
                        return;
                    }
                    
                    // Handle reordering of existing elements
                    if (this.draggedElementIndex !== null && this.dropTargetIndex !== null) {
                        // Don't do anything if we're dropping at the same position
                        if (this.dropTargetIndex === this.draggedElementIndex || 
                            this.dropTargetIndex === this.draggedElementIndex + 1) {
                            this.draggedElementIndex = null;
                            this.dropTargetIndex = null;
                            return;
                        }
                        
                        // Move the element
                        const element = this.formElements.splice(this.draggedElementIndex, 1)[0];
                        const insertIndex = this.dropTargetIndex > this.draggedElementIndex ? this.dropTargetIndex - 1 : this.dropTargetIndex;
                        this.formElements.splice(insertIndex, 0, element);
                        this.selectedElementIndex = insertIndex;
                        this.updateUnsavedChanges();
                    }
                    
                    this.draggedElementIndex = null;
                    this.dropTargetIndex = null;
                },
                
                // Element actions
                selectElement(index) {
                    this.selectedElementIndex = index;
                },
                
                removeElement(index) {
                    this.formElements.splice(index, 1);
                    if (this.selectedElementIndex === index) {
                        this.selectedElementIndex = null;
                    } else if (this.selectedElementIndex > index) {
                        this.selectedElementIndex--;
                    }
                    this.updateUnsavedChanges();
                },
                
                duplicateElement(index) {
                    const original = this.formElements[index];
                    const copy = JSON.parse(JSON.stringify(original));
                    copy.id = `elem-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
                    copy.label = `${copy.label} (Copy)`;
                    
                    this.formElements.splice(index + 1, 0, copy);
                    this.selectedElementIndex = index + 1;
                    this.updateUnsavedChanges();
                },
                
                // Options management
                addOption() {
                    if (!this.selectedElement || !this.selectedElement.options) return;
                    
                    const newIndex = this.selectedElement.options.length + 1;
                    const newOption = {
                        label: `Option ${newIndex}`,
                        value: `option${newIndex}`
                    };
                    
                    this.selectedElement.options.push(newOption);
                    this.updateUnsavedChanges();
                },
                
                removeOption(index) {
                    if (!this.selectedElement || !this.selectedElement.options) return;
                    if (this.selectedElement.options.length <= 1) return; // Keep at least one option
                    
                    this.selectedElement.options.splice(index, 1);
                    this.updateUnsavedChanges();
                },
                
                // Matrix management
                addMatrixRow() {
                    if (!this.selectedElement) return;
                    
                    if (!this.selectedElement.rows) {
                        this.selectedElement.rows = [];
                    }
                    
                    const newIndex = this.selectedElement.rows.length + 1;
                    this.selectedElement.rows.push({
                        label: `Row ${newIndex}`,
                        value: `row${newIndex}`
                    });
                    
                    this.updateUnsavedChanges();
                },
                
                removeMatrixRow(index) {
                    if (!this.selectedElement || !this.selectedElement.rows) return;
                    if (this.selectedElement.rows.length <= 1) return; // Keep at least one row
                    
                    this.selectedElement.rows.splice(index, 1);
                    this.updateUnsavedChanges();
                },
                
                addMatrixColumn() {
                    if (!this.selectedElement) return;
                    
                    if (!this.selectedElement.columns) {
                        this.selectedElement.columns = [];
                    }
                    
                    const newIndex = this.selectedElement.columns.length + 1;
                    this.selectedElement.columns.push({
                        label: `Column ${newIndex}`,
                        value: `col${newIndex}`
                    });
                    
                    this.updateUnsavedChanges();
                },
                
                removeMatrixColumn(index) {
                    if (!this.selectedElement || !this.selectedElement.columns) return;
                    if (this.selectedElement.columns.length <= 1) return; // Keep at least one column
                    
                    this.selectedElement.columns.splice(index, 1);
                    this.updateUnsavedChanges();
                },
                
                // Validation management
                toggleValidation(key) {
                    if (!this.selectedElement || !this.selectedElement.validation) return;
                    
                    if (!this.selectedElement.validation[key].enabled) {
                        // Initialize with default values if enabling
                        if (key === 'minLength') this.selectedElement.validation[key].value = 3;
                        if (key === 'maxLength') this.selectedElement.validation[key].value = 100;
                        if (key === 'minValue') this.selectedElement.validation[key].value = 1;
                        if (key === 'maxValue') this.selectedElement.validation[key].value = 100;
                        if (key === 'pattern') this.selectedElement.validation[key].value = '';
                    }
                    
                    this.updateUnsavedChanges();
                },
                
                // Form status management
                setFormStatus(status) {
                    this.formStatus = status;
                    this.updateUnsavedChanges();
                },
                
                // Form actions
                clearForm() {
                    this.showDeleteConfirm = true;
                },
                
                confirmClearForm() {
                    this.formElements = [];
                    this.selectedElementIndex = null;
                    this.showDeleteConfirm = false;
                    this.updateUnsavedChanges();
                },
                
                previewForm() {
                    this.showPreview = true;
                },
                
                addSampleElements() {
                    this.formElements = [
                        {
                            id: `elem-${Date.now()}-1`,
                            type: 'text',
                            label: 'Your Name',
                            placeholder: 'Enter your full name',
                            helpText: '',
                            required: true,
                            validation: {
                                minLength: { enabled: false, value: 3 },
                                maxLength: { enabled: false, value: 50 },
                                pattern: { enabled: false, value: '' }
                            }
                        },
                        {
                            id: `elem-${Date.now()}-2`,
                            type: 'email',
                            label: 'Email Address',
                            placeholder: 'Enter your email address',
                            helpText: 'We will only use your email if you request a response.',
                            required: true
                        },
                        {
                            id: `elem-${Date.now()}-3`,
                            type: 'radio',
                            label: 'How did you hear about us?',
                            helpText: '',
                            required: true,
                            options: [
                                { label: 'Search Engine', value: 'search' },
                                { label: 'Social Media', value: 'social' },
                                { label: 'Friend/Colleague', value: 'referral' },
                                { label: 'Advertisement', value: 'ad' },
                                { label: 'Other', value: 'other' }
                            ]
                        },
                        {
                            id: `elem-${Date.now()}-4`,
                            type: 'textarea',
                            label: 'Do you have any additional comments?',
                            placeholder: 'Your comments here...',
                            helpText: '',
                            required: false,
                            validation: {
                                minLength: { enabled: false, value: 10 },
                                maxLength: { enabled: false, value: 500 }
                            }
                        }
                    ];
                    
                    this.updateUnsavedChanges();
                },
                
                // Unsaved changes management
                checkUnsavedChanges(callback) {
                    if (this.hasUnsavedChanges) {
                        this.pendingAction = callback;
                        this.showUnsavedWarning = true;
                        return false;
                    }
                    
                    return true;
                },
                
                saveBeforeContinue() {
                    this.showUnsavedWarning = false;
                    this.saveForm();
                },
                
                continueWithoutSaving() {
                    this.showUnsavedWarning = false;
                    this.hasUnsavedChanges = false;
                    
                    if (this.pendingAction) {
                        const action = this.pendingAction;
                        this.pendingAction = null;
                        action();
                    }
                }
            };
        }
    </script>
}