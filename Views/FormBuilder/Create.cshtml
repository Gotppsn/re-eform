@{
    ViewData["Title"] = ViewData["FormId"] != null ? "Edit Form" : "Create Form";
}

<div x-data="formBuilder()" class="space-y-6">
    <!-- Form Header with actions -->
    <div class="bg-white shadow-sm rounded-lg p-4">
        <div class="flex flex-col sm:flex-row sm:items-center gap-4">
            <div class="flex-grow">
                <input type="text" x-model="formTitle" placeholder="Form Title" class="block w-full border-none text-2xl font-semibold focus:ring-0 p-0 focus:outline-none">
                <input type="text" x-model="formDescription" placeholder="Form Description" class="block w-full border-none text-gray-500 focus:ring-0 p-0 mt-1 focus:outline-none">
            </div>
            <div class="flex items-center space-x-3">
                <div class="relative" x-data="{ open: false }">
                    <button @@click="open = !open" type="button" class="inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                        <svg class="-ml-0.5 mr-2 h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M3 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd" />
                        </svg>
                        Status: <span x-text="formStatus" class="ml-1"></span>
                    </button>
                    <div x-show="open" @@click.away="open = false" class="origin-top-right absolute right-0 mt-2 w-40 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 focus:outline-none" role="menu" aria-orientation="vertical">
                        <div class="py-1" role="none">
                            <button @@click="formStatus = 'Draft'; open = false" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 w-full text-left" role="menuitem">Draft</button>
                            <button @@click="formStatus = 'Active'; open = false" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 w-full text-left" role="menuitem">Active</button>
                            <button @@click="formStatus = 'Archived'; open = false" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 w-full text-left" role="menuitem">Archived</button>
                        </div>
                    </div>
                </div>
                
                <button type="button" @@click="previewForm" class="inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                    <svg class="-ml-0.5 mr-2 h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                        <path d="M10 12a2 2 0 100-4 2 2 0 000 4z" />
                        <path fill-rule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clip-rule="evenodd" />
                    </svg>
                    Preview
                </button>
                
                <button type="button" @@click="saveForm" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                    <svg class="-ml-0.5 mr-2 h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
                    </svg>
                    Save Form
                </button>
            </div>
        </div>
    </div>

    <!-- Main Content -->
    <div class="flex flex-col lg:flex-row gap-6">
        <!-- Form Builder Canvas -->
        <div class="flex-grow bg-white shadow-sm rounded-lg overflow-hidden">
            <div class="border-b border-gray-200 p-4 flex justify-between items-center">
                <h2 class="text-lg font-medium text-gray-900">Form Builder</h2>
                <button type="button" @@click="clearForm" class="text-sm text-gray-500 hover:text-gray-700">
                    Clear All
                </button>
            </div>
            <div class="p-6">
                <div 
                    id="form-canvas" 
                    class="min-h-[500px] border-2 border-dashed border-gray-300 rounded-lg p-4 relative"
                    x-ref="formCanvas"
                    @@dragover.prevent="dragOver($event)"
                    @@dragleave.prevent="dragLeave($event)"
                    @@drop.prevent="drop($event)">
                    
                    <template x-if="formElements.length === 0">
                        <div class="flex flex-col items-center justify-center h-64 text-gray-400">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mb-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 13h6m-3-3v6m-3 5h8a2 2 0 002-2V8a2 2 0 00-2-2H9a2 2 0 00-2 2v8a2 2 0 002 2z" />
                            </svg>
                            <p class="text-center">Drag and drop form elements from the toolbox</p>
                        </div>
                    </template>
                    
                    <template x-for="(element, index) in formElements" :key="element.id">
                        <div 
                            class="bg-white border p-4 mb-3 rounded-lg cursor-move hover:border-indigo-300 transition-colors shadow-sm"
                            :class="{'ring-2 ring-indigo-500 border-indigo-500': selectedElementIndex === index}"
                            @@click.stop="selectElement(index)"
                            draggable="true"
                            @@dragstart="dragStart($event, index)"
                            @@dragend="dragEnd($event)">
                            
                            <div class="flex justify-between items-start mb-2">
                                <div class="flex items-center">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400 mr-2 cursor-move" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2z" />
                                    </svg>
                                    <h3 class="font-medium text-gray-900" x-text="element.label || getElementTypeName(element.type)"></h3>
                                    <span x-show="element.required" class="ml-1 text-red-500">*</span>
                                </div>
                                <div class="flex space-x-2">
                                    <button type="button" @@click.stop="duplicateElement(index)" class="text-gray-400 hover:text-indigo-600">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                                        </svg>
                                    </button>
                                    <button type="button" @@click.stop="removeElement(index)" class="text-gray-400 hover:text-red-600">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                        </svg>
                                    </button>
                                </div>
                            </div>
                            
                            <!-- Element Preview based on type -->
                            <div>
                                <!-- Text Input -->
                                <template x-if="element.type === 'text'">
                                    <input type="text" class="mt-1 block w-full shadow-sm border-gray-300 rounded-md" :placeholder="element.placeholder || 'Text input'" disabled>
                                </template>
                                
                                <!-- Textarea -->
                                <template x-if="element.type === 'textarea'">
                                    <textarea class="mt-1 block w-full shadow-sm border-gray-300 rounded-md" rows="3" :placeholder="element.placeholder || 'Text area'" disabled></textarea>
                                </template>
                                
                                <!-- Select -->
                                <template x-if="element.type === 'select'">
                                    <select class="mt-1 block w-full shadow-sm border-gray-300 rounded-md" disabled>
                                        <option selected disabled x-text="element.placeholder || 'Select an option'"></option>
                                        <template x-for="option in element.options" :key="option.value">
                                            <option x-text="option.label"></option>
                                        </template>
                                    </select>
                                </template>
                                
                                <!-- Radio Group -->
                                <template x-if="element.type === 'radio'">
                                    <div class="mt-2 space-y-2">
                                        <template x-for="option in element.options" :key="option.value">
                                            <div class="flex items-center">
                                                <input type="radio" class="h-4 w-4 text-indigo-600 border-gray-300" disabled>
                                                <label class="ml-2 block text-sm text-gray-700" x-text="option.label"></label>
                                            </div>
                                        </template>
                                    </div>
                                </template>
                                
                                <!-- Checkbox Group -->
                                <template x-if="element.type === 'checkbox'">
                                    <div class="mt-2 space-y-2">
                                        <template x-for="option in element.options" :key="option.value">
                                            <div class="flex items-center">
                                                <input type="checkbox" class="h-4 w-4 text-indigo-600 border-gray-300 rounded" disabled>
                                                <label class="ml-2 block text-sm text-gray-700" x-text="option.label"></label>
                                            </div>
                                        </template>
                                    </div>
                                </template>
                                
                                <!-- File Upload -->
                                <template x-if="element.type === 'file'">
                                    <div class="mt-1 flex justify-center px-6 pt-5 pb-6 border-2 border-gray-300 border-dashed rounded-md">
                                        <div class="space-y-1 text-center">
                                            <svg class="mx-auto h-12 w-12 text-gray-400" stroke="currentColor" fill="none" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                                            </svg>
                                            <p class="text-xs text-gray-500">Upload a file or drag and drop</p>
                                        </div>
                                    </div>
                                </template>
                                
                                <!-- Date Picker -->
                                <template x-if="element.type === 'date'">
                                    <input type="date" class="mt-1 block w-full shadow-sm border-gray-300 rounded-md" disabled>
                                </template>
                            </div>
                            
                            <p x-show="element.helpText" class="mt-1 text-xs text-gray-500" x-text="element.helpText"></p>
                        </div>
                    </template>
                    
                    <div x-show="isDraggingOver" class="absolute inset-0 border-2 border-indigo-400 rounded-lg bg-indigo-50 bg-opacity-30 pointer-events-none"></div>
                </div>
            </div>
        </div>
        
        <!-- Toolbox and Properties -->
        <div class="lg:w-80 space-y-6">
            <!-- Toolbox Panel -->
            <div class="bg-white shadow-sm rounded-lg overflow-hidden">
                <div class="p-4 border-b border-gray-200">
                    <h2 class="text-lg font-medium text-gray-900">Form Elements</h2>
                </div>
                <div class="p-4 space-y-2" id="toolbox">
                    <div 
                        class="flex items-center p-3 border border-gray-200 rounded-md cursor-grab hover:bg-gray-50 transition-colors"
                        draggable="true"
                        @@dragstart="dragStartFromToolbox($event, 'text')">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101" />
                        </svg>
                        <span class="text-sm font-medium">Text Input</span>
                    </div>
                    
                    <div 
                        class="flex items-center p-3 border border-gray-200 rounded-md cursor-grab hover:bg-gray-50 transition-colors"
                        draggable="true"
                        @@dragstart="dragStartFromToolbox($event, 'textarea')">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h7" />
                        </svg>
                        <span class="text-sm font-medium">Text Area</span>
                    </div>
                    
                    <div 
                        class="flex items-center p-3 border border-gray-200 rounded-md cursor-grab hover:bg-gray-50 transition-colors"
                        draggable="true"
                        @@dragstart="dragStartFromToolbox($event, 'select')">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l4-4 4 4m0 6l-4 4-4-4" />
                        </svg>
                        <span class="text-sm font-medium">Dropdown</span>
                    </div>
                    
                    <div 
                        class="flex items-center p-3 border border-gray-200 rounded-md cursor-grab hover:bg-gray-50 transition-colors"
                        draggable="true"
                        @@dragstart="dragStartFromToolbox($event, 'radio')">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                        <span class="text-sm font-medium">Radio Buttons</span>
                    </div>
                    
                    <div 
                        class="flex items-center p-3 border border-gray-200 rounded-md cursor-grab hover:bg-gray-50 transition-colors"
                        draggable="true"
                        @@dragstart="dragStartFromToolbox($event, 'checkbox')">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                        </svg>
                        <span class="text-sm font-medium">Checkboxes</span>
                    </div>
                    
                    <div 
                        class="flex items-center p-3 border border-gray-200 rounded-md cursor-grab hover:bg-gray-50 transition-colors"
                        draggable="true"
                        @@dragstart="dragStartFromToolbox($event, 'file')">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.172 7l-6.586 6.586a2 2 0 102.828 2.828l6.414-6.586a4 4 0 00-5.656-5.656l-6.415 6.585a6 6 0 108.486 8.486L20.5 13" />
                        </svg>
                        <span class="text-sm font-medium">File Upload</span>
                    </div>
                    
                    <div 
                        class="flex items-center p-3 border border-gray-200 rounded-md cursor-grab hover:bg-gray-50 transition-colors"
                        draggable="true"
                        @@dragstart="dragStartFromToolbox($event, 'date')">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                        </svg>
                        <span class="text-sm font-medium">Date Picker</span>
                    </div>
                </div>
            </div>
            
            <!-- Properties Panel -->
            <div class="bg-white shadow-sm rounded-lg overflow-hidden">
                <div class="p-4 border-b border-gray-200">
                    <h2 class="text-lg font-medium text-gray-900">Properties</h2>
                </div>
                <div class="p-4">
                    <div x-show="selectedElementIndex === null" class="text-center py-12 text-gray-500">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mx-auto mb-2 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 5a1 1 0 011-1h14a1 1 0 011 1v2a1 1 0 01-1 1H5a1 1 0 01-1-1V5zM4 13a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H5a1 1 0 01-1-1v-6zM16 13a1 1 0 011-1h2a1 1 0 011 1v6a1 1 0 01-1 1h-2a1 1 0 01-1-1v-6z" />
                        </svg>
                        <p>Select a form element to edit its properties</p>
                    </div>
                    
                    <div x-show="selectedElementIndex !== null" class="space-y-4">
                        <div>
                            <label for="element-label" class="block text-sm font-medium text-gray-700 mb-1">Label</label>
                            <input type="text" id="element-label" x-model="selectedElement ? selectedElement.label : ''" class="block w-full shadow-sm border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500">
                        </div>
                        
                        <div x-show="['text', 'textarea', 'select'].includes(selectedElement ? selectedElement.type : '')">
                            <label for="element-placeholder" class="block text-sm font-medium text-gray-700 mb-1">Placeholder</label>
                            <input type="text" id="element-placeholder" x-model="selectedElement ? selectedElement.placeholder : ''" class="block w-full shadow-sm border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500">
                        </div>
                        
                        <div>
                            <label for="element-help-text" class="block text-sm font-medium text-gray-700 mb-1">Help Text</label>
                            <input type="text" id="element-help-text" x-model="selectedElement ? selectedElement.helpText : ''" class="block w-full shadow-sm border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500">
                        </div>
                        
                        <div class="flex items-center">
                            <input type="checkbox" id="element-required" x-model="selectedElement ? selectedElement.required : false" class="h-4 w-4 text-indigo-600 border-gray-300 rounded focus:ring-indigo-500">
                            <label for="element-required" class="ml-2 block text-sm text-gray-700">Required</label>
                        </div>
                        
                        <template x-if="selectedElement && ['select', 'radio', 'checkbox'].includes(selectedElement.type)">
                            <div>
                                <div class="flex justify-between items-center mb-2">
                                    <label class="block text-sm font-medium text-gray-700">Options</label>
                                    <button type="button" @@click="addOption" class="text-sm text-indigo-600 hover:text-indigo-900">
                                        + Add Option
                                    </button>
                                </div>
                                <div class="space-y-2">
                                    <template x-for="(option, optionIndex) in selectedElement.options" :key="optionIndex">
                                        <div class="flex gap-2">
                                            <input type="text" x-model="option.label" placeholder="Label" class="block flex-grow shadow-sm border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500 text-sm">
                                            <input type="text" x-model="option.value" placeholder="Value" class="block w-24 shadow-sm border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500 text-sm">
                                            <button type="button" @@click="removeOption(optionIndex)" class="text-gray-400 hover:text-red-600">
                                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                                                </svg>
                                            </button>
                                        </div>
                                    </template>
                                </div>
                            </div>
                        </template>
                        
                        <template x-if="selectedElement && selectedElement.type === 'file'">
                            <div>
                                <label for="element-accepted-files" class="block text-sm font-medium text-gray-700 mb-1">Accepted Files</label>
                                <input type="text" id="element-accepted-files" x-model="selectedElement.acceptedFiles" placeholder="e.g., PDF, DOC, DOCX up to 10MB" class="block w-full shadow-sm border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500">
                            </div>
                        </template>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Preview Modal -->
    <div x-show="showPreview" class="fixed inset-0 z-50 overflow-y-auto" aria-labelledby="modal-title" role="dialog" aria-modal="true" style="display: none;">
        <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
            <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" aria-hidden="true"></div>
            <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
            <div class="inline-block align-bottom bg-white rounded-lg px-4 pt-5 pb-4 text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-2xl sm:w-full sm:p-6">
                <div class="absolute top-0 right-0 pt-4 pr-4">
                    <button type="button" @@click="showPreview = false" class="bg-white rounded-md text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                        <span class="sr-only">Close</span>
                        <svg class="h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                        </svg>
                    </button>
                </div>
                <div class="sm:flex sm:items-start">
                    <div class="mt-3 text-center sm:mt-0 sm:text-left w-full">
                        <h3 class="text-lg leading-6 font-medium text-gray-900" id="modal-title">
                            Form Preview
                        </h3>
                        <div class="mt-4 border-t border-gray-200 pt-4">
                            <h2 class="text-xl font-semibold text-gray-900" x-text="formTitle || 'Untitled Form'"></h2>
                            <p class="text-gray-500 mt-1" x-text="formDescription || 'No description provided'"></p>
                            
                            <form class="mt-6 space-y-6">
                                <template x-for="(element, index) in formElements" :key="element.id">
                                    <div class="space-y-1">
                                        <!-- Text Input -->
                                        <template x-if="element.type === 'text'">
                                            <div>
                                                <label :for="`preview-${element.id}`" class="block text-sm font-medium text-gray-700" x-text="element.label || 'Text Input'"></label>
                                                <span x-show="element.required" class="text-red-500">*</span>
                                                <input type="text" :id="`preview-${element.id}`" :placeholder="element.placeholder || ''" class="mt-1 block w-full shadow-sm border-gray-300 rounded-md">
                                                <p x-show="element.helpText" class="mt-1 text-xs text-gray-500" x-text="element.helpText"></p>
                                            </div>
                                        </template>
                                        
                                        <!-- Similar templates for other element types... -->
                                    </div>
                                </template>
                                
                                <div class="pt-4">
                                    <button type="button" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                                        Submit
                                    </button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function formBuilder() {
            return {
                formId: '@(ViewData["FormId"])',
                formTitle: '',
                formDescription: '',
                formStatus: 'Draft',
                formElements: [],
                selectedElementIndex: null,
                isDraggingOver: false,
                showPreview: false,
                draggedElementIndex: null,
                
                init() {
                    // Initialize with an empty form or load existing form if ID is provided
                    if (this.formId) {
                        this.loadForm();
                    }
                    
                    // Close property panel when clicking outside
                    document.addEventListener('click', (e) => {
                        if (!e.target.closest('.form-canvas') && !e.target.closest('.property-panel')) {
                            this.selectedElementIndex = null;
                        }
                    });
                },
                
                get selectedElement() {
                    return this.selectedElementIndex !== null ? this.formElements[this.selectedElementIndex] : null;
                },
                
                loadForm() {
                    // In a real application, this would fetch the form data from the server
                    // For now, we'll use mock data
                    console.log('Loading form with ID:', this.formId);
                    
                    // Sample form data - in a real app, you would fetch this from an API
                    const mockFormData = {
                        title: 'Customer Feedback Form',
                        description: 'Help us improve our products and services by sharing your feedback.',
                        status: 'Active',
                        elements: [
                            {
                                id: 'elem-1',
                                type: 'text',
                                label: 'Your Name',
                                placeholder: 'Enter your full name',
                                helpText: '',
                                required: true
                            },
                            {
                                id: 'elem-2',
                                type: 'text',
                                label: 'Email Address',
                                placeholder: 'Enter your email address',
                                helpText: 'We will only use your email if you request a response.',
                                required: true
                            },
                            {
                                id: 'elem-3',
                                type: 'radio',
                                label: 'How satisfied are you with our service?',
                                helpText: '',
                                required: true,
                                options: [
                                    { label: 'Very Satisfied', value: '5' },
                                    { label: 'Satisfied', value: '4' },
                                    { label: 'Neutral', value: '3' },
                                    { label: 'Dissatisfied', value: '2' },
                                    { label: 'Very Dissatisfied', value: '1' }
                                ]
                            },
                            {
                                id: 'elem-4',
                                type: 'textarea',
                                label: 'What can we do to improve our service?',
                                placeholder: 'Your suggestions for improvement',
                                helpText: '',
                                required: false
                            }
                        ]
                    };
                    
                    this.formTitle = mockFormData.title;
                    this.formDescription = mockFormData.description;
                    this.formStatus = mockFormData.status;
                    this.formElements = mockFormData.elements;
                },
                
                getElementTypeName(type) {
                    const typeNames = {
                        'text': 'Text Input',
                        'textarea': 'Text Area',
                        'select': 'Dropdown',
                        'radio': 'Radio Buttons',
                        'checkbox': 'Checkboxes',
                        'file': 'File Upload',
                        'date': 'Date Picker'
                    };
                    
                    return typeNames[type] || 'Form Element';
                },
                
                createNewElement(type) {
                    const element = {
                        id: `elem-${Date.now()}`,
                        type,
                        label: this.getElementTypeName(type),
                        placeholder: '',
                        helpText: '',
                        required: false
                    };
                    
                    // Add options for select, radio, and checkbox types
                    if (['select', 'radio', 'checkbox'].includes(type)) {
                        element.options = [
                            { label: 'Option 1', value: 'option1' },
                            { label: 'Option 2', value: 'option2' }
                        ];
                    }
                    
                    return element;
                },
                
                // Toolbox drag and drop
                dragStartFromToolbox(event, elementType) {
                    event.dataTransfer.setData('elementType', elementType);
                    event.dataTransfer.effectAllowed = 'copy';
                },
                
                // Form canvas drag and drop for reordering
                dragStart(event, index) {
                    this.draggedElementIndex = index;
                    event.dataTransfer.effectAllowed = 'move';
                },
                
                dragEnd(event) {
                    this.draggedElementIndex = null;
                },
                
                dragOver(event) {
                    event.preventDefault();
                    this.isDraggingOver = true;
                },
                
                dragLeave(event) {
                    this.isDraggingOver = false;
                },
                
                drop(event) {
                    event.preventDefault();
                    this.isDraggingOver = false;
                    
                    // Check if this is a new element from the toolbox
                    const elementType = event.dataTransfer.getData('elementType');
                    if (elementType) {
                        const newElement = this.createNewElement(elementType);
                        this.formElements.push(newElement);
                        this.selectedElementIndex = this.formElements.length - 1;
                        return;
                    }
                    
                    // Handle reordering of existing elements
                    if (this.draggedElementIndex !== null) {
                        // Find the drop target index
                        const dropTargetIndex = this.getDropTargetIndex(event);
                        
                        // Move the element
                        if (dropTargetIndex !== this.draggedElementIndex) {
                            const element = this.formElements.splice(this.draggedElementIndex, 1)[0];
                            this.formElements.splice(dropTargetIndex, 0, element);
                            this.selectedElementIndex = dropTargetIndex;
                        }
                    }
                },
                
                getDropTargetIndex(event) {
                    // Get all form elements in the canvas
                    const formElementNodes = Array.from(this.formCanvas.querySelectorAll('.form-element'));
                    
                    // Get the drop position
                    const dropY = event.clientY;
                    
                    // Find the closest element to the drop position
                    for (let i = 0; i < formElementNodes.length; i++) {
                        const rect = formElementNodes[i].getBoundingClientRect();
                        const centerY = rect.top + (rect.height / 2);
                        
                        if (dropY < centerY) {
                            return i;
                        }
                    }
                    
                    // If we're here, drop at the end
                    return formElementNodes.length;
                },
                
                // Element actions
                selectElement(index) {
                    this.selectedElementIndex = index;
                },
                
                removeElement(index) {
                    this.formElements.splice(index, 1);
                    if (this.selectedElementIndex === index) {
                        this.selectedElementIndex = null;
                    } else if (this.selectedElementIndex > index) {
                        this.selectedElementIndex--;
                    }
                },
                
                duplicateElement(index) {
                    const original = this.formElements[index];
                    const copy = JSON.parse(JSON.stringify(original));
                    copy.id = `elem-${Date.now()}`;
                    copy.label = `${copy.label} (Copy)`;
                    
                    this.formElements.splice(index + 1, 0, copy);
                    this.selectedElementIndex = index + 1;
                },
                
                // Option management
                addOption() {
                    if (!this.selectedElement || !this.selectedElement.options) return;
                    
                    const newOption = {
                        label: `Option ${this.selectedElement.options.length + 1}`,
                        value: `option${this.selectedElement.options.length + 1}`
                    };
                    
                    this.selectedElement.options.push(newOption);
                },
                
                removeOption(index) {
                    if (!this.selectedElement || !this.selectedElement.options) return;
                    if (this.selectedElement.options.length <= 1) return; // Keep at least one option
                    
                    this.selectedElement.options.splice(index, 1);
                },
                
                // Form actions
                clearForm() {
                    if (confirm('Are you sure you want to clear all form elements?')) {
                        this.formElements = [];
                        this.selectedElementIndex = null;
                    }
                },
                
                previewForm() {
                    this.showPreview = true;
                },
                
                saveForm() {
                    // Validate form
                    if (!this.formTitle.trim()) {
                        alert('Please enter a form title');
                        return;
                    }
                    
                    // In a real application, this would send the form data to the server
                    const formData = {
                        id: this.formId || '',
                        title: this.formTitle,
                        description: this.formDescription,
                        status: this.formStatus,
                        elements: this.formElements
                    };
                    
                    console.log('Saving form:', formData);
                    
                    // Simulate successful save
                    alert('Form saved successfully!');
                    
                    // Redirect to form management page if this is a new form
                    if (!this.formId) {
                        // window.location.href = '/FormManagement';
                    }
                }
            };
        }
    </script>
}